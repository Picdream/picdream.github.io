<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微信小程序</title>
    <url>/archives/10001.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="77cff9fee7b5149be6731feebe4c886747f64c34eee36a5e439bae238e40fb58">e6b9f4be5e64eaf3b5772d5fff20be0557923f166c53567fbdce9146f0881e05f5a50c0b0d993ce218396c8e2661d940a8d8d9e24116418087ee0b2e469047abd296299e3d00729891561ae833dcd31202de8fec26631cf649d95609d16bad6918347a4a1b60c639df34117a6bac77712ac8b447580e9b940c38f1346db6cfea762860eea3756b0fe65b52ce043ec4e235d7a7d20e396cafa7b540fe64996b34ce96cddc9d2ec1d8dfded8a3f53c4d319fbd52cd7e61ae49b4920727bfb892cc424c794a18ecad083dc60b1e3c0393764fd7b1d087b99a2f52f6efc0b9c040015eb6812ab6c6d1c91f127a5e7e8797b762a1ce0cd0c99477e83bb97b9e417d0b336df0458b7affdb8102a4c5a4064284a4583e7bb3b053b86cdc54fbea50a90cccb662b5e227a6f2dd577da6490a3135d1d871bd012088e976d3a4963c362416daedf3a1f597736f275a88a047cf712b7417b306d0ad77ff42bdf980788a737cc9b0f2cc5052414b6849b15fc632981686c177e5e8b8f596ce076b241568a90732876ade0f521756d3fca2bc4a7c8edb8a477a9177e796c50f7a2a0fb713d9f1cb296bfce43a40c5c2f8b7008881463a0bf56accd29e3d4e96f4319e0e1ec9c802620a9a0cb777fbb312e7819f00b40a0e070004e3f5fe2ae8598a2e6e7c597a0d7f881cec26c07b5b88469b9de0aa0f54f70b664c39a8873b23115fb572e83454828a67db02bce8789c71234ab9e3973ec107b89f98b70cc3ca4dad32d807bfa70eae265a289849325cb5a24a19d4fa9de87f11662cc5aeb7dba948a3d1d2c47bbae5564216aeaf5c16824b5541fb8a73a8a9382de50c7a3f3f7e1dbb1f3ff934bc4e6587d644da3c79d60e560d21ef8d8506a9f34305736ac5c8ff7f4459598afb5680b6f3b8945ba57ecdc8c5b4a19efa7bccf6cb0fb2aa93cdb7cc2381727c7c69426f21cd4b3114f33dca861eb3b218fe32b363981d89e70946c1209246dc755e48080df1c8a671c10050caf76fb47e60608704786fb55ebd5ee229e86b08a2246f16360cb612ad19f4f4567c1edae5288655d7d4c9d659e629067b40e06e78ee1740a49f9267de791e10946eb26460c8e62172d9384dd4a0cf6d918443af2cb6f248331868a6505c7c5517a6f60a1e744518e416b07a30aefaa18a51f0fa4602c90a410b487a3df80bdbe9be75524e1a8b38080beb9043069dee6b0ccb5c08ea56e8dfe9cb73aee74bab473527a37aa749e2070db5e6b054a88eb9c5e1ec96a639085fc49754b2b9cdb54fc9ddb51e4103748bf06d8bbd0addc9ff64e5f0c25fe4e9c51a1a155fe9226b9f4464e5ad6bd7acb01f8ea27e2b86c5c00952a8ef1c641ddd05e01ca779030f456f28a036c46f78266707bc11e1c20df308f73ac226e9b7fcfbcaa2fd19227b4c4cdee9b1ae47a9487ee1696801c6ae536ad723a0eb496c92f290a26af60104f9c430500a88f6927ec03e99924b10713fea846d263b9a7dabaa0acbddc8cd3b9d7bcb6ce9a50b7dbe68d460ab9dd2e35a393e5490bb433a238a290de7d776d65044b50317c9ee36331a8a55984e59a2195a34</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile构建stm32重定向串口printf</title>
    <url>/archives/10002.html</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="一、串口重定向"><a href="#一、串口重定向" class="headerlink" title="一、串口重定向"></a>一、串口重定向</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int _write(int fd, char *ch, int len)//可在main.c或者uart.c</span><br><span class="line">&#123;</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1, (uint8_t*)ch, len, 0xFFFF);</span><br><span class="line">  <span class="built_in">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、解决打印浮点数问题"><a href="#二、解决打印浮点数问题" class="headerlink" title="二、解决打印浮点数问题"></a>二、解决打印浮点数问题</h2><p>在Makefile中找到如下位置进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections</span><br><span class="line">+ LDFLAGS = $(MCU) -u _printf_float -u _scanf_float -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections</span><br></pre></td></tr></table></figure>

<h2 id="三、解决打印出现中文乱码问题"><a href="#三、解决打印出现中文乱码问题" class="headerlink" title="三、解决打印出现中文乱码问题"></a>三、解决打印出现中文乱码问题</h2><p>修改编码格式即可，我的改成GB 2312解决了乱码问题,或者使用支持UT-8的编码(推荐使用后者)</p>
]]></content>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Markdown的语法</title>
    <url>/archives/ebd52ec9.html</url>
    <content><![CDATA[<p>以下是Markdwm的一些常用到的基本语法</p>
<span id="more"></span>

<h2 id="关于Markdown的语法使用"><a href="#关于Markdown的语法使用" class="headerlink" title="关于Markdown的语法使用"></a>关于Markdown的语法使用</h2><h3 id="1-标题的用法"><a href="#1-标题的用法" class="headerlink" title="1.标题的用法"></a>1.标题的用法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以 <span class="string">&#x27;#&#x27;</span> 符号作为标题</span><br><span class="line">格式:</span><br><span class="line">如：<span class="comment"># &#x27;空格&#x27; 文字&quot;</span></span><br><span class="line">    <span class="comment">## + &#x27;空格&#x27; 文字&quot;</span></span><br><span class="line">标题的等级：符号少的等级高，如<span class="string">&#x27;# 大标题&#x27;</span>,<span class="string">&#x27;## 小标题&#x27;</span>,标题的等级最多有五个,像<span class="string">&#x27;##### 标题&#x27;</span>等级最低。</span><br></pre></td></tr></table></figure>

<h3 id="2-菜单"><a href="#2-菜单" class="headerlink" title="2.菜单"></a>2.菜单</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以 <span class="string">&#x27;-&#x27;</span>或者 <span class="string">&#x27;*&#x27;</span> 符号作为菜单</span><br><span class="line">格式:</span><br><span class="line">如：- <span class="string">&#x27;空格&#x27;</span> 文字</span><br><span class="line">    * 文字</span><br></pre></td></tr></table></figure>

<h4 id="菜单效果如下"><a href="#菜单效果如下" class="headerlink" title="菜单效果如下"></a>菜单效果如下</h4><p>我的常用编辑软件</p>
<ul>
<li>vscode</li>
<li>keil</li>
<li>QT</li>
<li>DW</li>
<li>PCPyCharm</li>
<li>Eclipse</li>
</ul>
<h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以 <span class="string">&#x27;&gt;&#x27;</span> 符号作为引用</span><br><span class="line">格式:</span><br><span class="line">如：&gt; <span class="string">&#x27;空格&#x27;</span> 内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用突出内容显示</p>
</blockquote>
<h3 id="4-字体"><a href="#4-字体" class="headerlink" title="4.字体"></a>4.字体</h3><h4 id="1-粗体"><a href="#1-粗体" class="headerlink" title="(1)粗体"></a>(1)<strong>粗体</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式: <span class="string">&quot;**内容**&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-斜体"><a href="#2-斜体" class="headerlink" title="(2)斜体"></a>(2)<em>斜体</em></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式: *内容*</span><br></pre></td></tr></table></figure>

<h4 id="3-高亮"><a href="#3-高亮" class="headerlink" title="(3)高亮"></a>(3)<code>高亮</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式: `内容`</span><br></pre></td></tr></table></figure>

<h3 id="5-高亮代码"><a href="#5-高亮代码" class="headerlink" title="5.高亮代码"></a>5.高亮代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式: ` ` `语法类型</span><br><span class="line">     代码内容</span><br><span class="line">     ` ` `(注意后面这个地方不能有空格)</span><br><span class="line">如：</span><br><span class="line">    ` ` `bash</span><br><span class="line">    int main(void)&#123;</span><br><span class="line">        <span class="keyword">while</span>(1);</span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    ` ` `</span><br></pre></td></tr></table></figure>

<h3 id="6-链接"><a href="#6-链接" class="headerlink" title="6.链接"></a>6.链接</h3><p><a href="https://github.com/Pickup-OldDream/">我git仓库的链接</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    [内容](链接)</span><br></pre></td></tr></table></figure>

<h3 id="7-插入图片"><a href="#7-插入图片" class="headerlink" title="7.插入图片"></a>7.插入图片</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    ![内容](链接)</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.328888.xyz/2022/06/18/0sTMq.png" alt="面朝大海"></p>
<h3 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    ***</span><br></pre></td></tr></table></figure>

<h3 id="9-插入视频"><a href="#9-插入视频" class="headerlink" title="9.插入视频"></a>9.插入视频</h3><p>可直接嵌入代码</p>
<h3 id="10-制表格"><a href="#10-制表格" class="headerlink" title="10.制表格"></a>10.制表格</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|内容       |内容       |内容       |</span><br><span class="line">|----|---:|---:|</span><br><span class="line">|A|B|C|</span><br><span class="line">|A|B|C|</span><br><span class="line">|A|B|C|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line">|内容|内容|内容|</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><table>
<thead>
<tr>
<th>内容</th>
<th align="right">内容</th>
<th align="right">内容</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td align="right">B</td>
<td align="right">C</td>
</tr>
<tr>
<td>A</td>
<td align="right">B</td>
<td align="right">C</td>
</tr>
<tr>
<td>A</td>
<td align="right">B</td>
<td align="right">C</td>
</tr>
<tr>
<td>内容</td>
<td align="right">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="right">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<h3 id="11-Markdown的语法错误汇总"><a href="#11-Markdown的语法错误汇总" class="headerlink" title="11.Markdown的语法错误汇总"></a>11.Markdown的语法错误汇总</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MD004 - Unordered list style 整篇文档的无序列表的格式要一致</span><br><span class="line">MD005 - Inconsistent indentation <span class="keyword">for</span> list items at the same level</span><br><span class="line">同一个等级的列表的缩进要一</span><br><span class="line">MD006 - Consider starting bulleted lists at the beginning of the line</span><br><span class="line">一级标题不能够缩进</span><br><span class="line">MD007 - Unordered list indentation</span><br><span class="line">无序列表嵌套的时候默认采取两个空格的缩进方式</span><br><span class="line">MD009 - Trailing spaces</span><br><span class="line">行尾最多可以添加两个空格，超出之后会有警告，最好每次都是两个空格因为两个空格刚好可以用来换行</span><br><span class="line">MD010 - Hard tabs</span><br><span class="line">不能使用tab来进行缩进，要使用空格</span><br><span class="line">MD011 - Reversed <span class="built_in">link</span> syntax</span><br><span class="line">内联形式的链接和创建方式是否错误，中括号和圆括号是否使用正确</span><br><span class="line">MD012 - Multiple consecutive blank lines</span><br><span class="line">文档中不能有连续的空行（文档末可以有一个空行），在代码块中这个规则不会生效</span><br><span class="line">MD013 - Line length</span><br><span class="line">默认行的最大长度是80，对表格代码块标题都起效果</span><br><span class="line">MD014 - Dollar signs used before commands without showing output</span><br><span class="line">在代码块中，终端命令前面不需要有美元符号，如果如果代码块中既有终端命令，也有命令的输出，则终端命令前可以有美元符号($)</span><br><span class="line">MD018 - No space after <span class="built_in">hash</span> on atx style heading</span><br><span class="line">标题格式如果是<span class="string">&quot;atx&quot;</span>的话，<span class="comment">#号和文字之间需要一个空格隔开</span></span><br><span class="line">MD019 - Multiple spaces after <span class="built_in">hash</span> on atx style heading</span><br><span class="line">标题格式如果是<span class="string">&quot;atx&quot;</span>的话，<span class="comment">#号和文字之间只需要一个空格隔开，不需要多个</span></span><br><span class="line">MD020 - No space inside hashes on closed atx style heading</span><br><span class="line">在closed_atx格式的标题中，文字和前后的<span class="comment">#号之间都需要一个空格隔开</span></span><br><span class="line">MD021 - Multiple spaces inside hashes on closed atx style heading</span><br><span class="line">在closed_atx格式的标题中，文字和前后的<span class="comment">#号之间只需要一个空格隔开，不能有多余的</span></span><br><span class="line">MD022 - Headings should be surrounded by blank lines</span><br><span class="line">标题的上下行必须都是空格</span><br><span class="line">MD023 - Headings must start at the beginning of the line</span><br><span class="line">标题行不能缩进</span><br><span class="line">MD024 - Multiple headings with the same content</span><br><span class="line">在文档中不能有重复性的标题</span><br><span class="line">MD025 - Multiple top level headings <span class="keyword">in</span> the same document</span><br><span class="line">同一个文档中，只能有一个最高级的标题，默认也只能有一个一级标题</span><br><span class="line">MD026 - Trailing punctuation <span class="keyword">in</span> heading</span><br><span class="line">标题的末尾不能有<span class="string">&quot;. , ; : ! ? &quot;</span>这些符号</span><br><span class="line">MD027 - Multiple spaces after blockquote symbol</span><br><span class="line">在创建引用块的时候，右尖号与文字之间必须有且只有一个空格</span><br><span class="line">MD028 - Blank line inside blockquote</span><br><span class="line">两个引用区块间不能仅用一个空行隔开或者同一引用区块中不能有空行，如果一行中没有内容，则这一行要用&gt;开头</span><br><span class="line">MD029 - Ordered list item prefix</span><br><span class="line">有序列表的前缀序号格式必须只用1或者从1开始的加1递增数字</span><br><span class="line">MD030 - Spaces after list markers</span><br><span class="line">列表（有序、无序）的前缀符号和文字之间用1个空格隔开，在列表嵌套或者同一列表项中有多个段落时，无序列表缩进两个空格，有序列表缩进3个空格</span><br><span class="line">MD031 - Fenced code blocks should be surrounded by blank lines</span><br><span class="line">单独的代码块前后需要用空行隔开（除非是在文档开头或末尾），否则有些解释器不会解释为代码块</span><br><span class="line">MD032 - Lists should be surrounded by blank lines</span><br><span class="line">列表（有序、无序）前后需要用空行隔开，否则有些解释器不会解释为列表，列表的缩进必须一致，否则会警告</span><br><span class="line">MD033 - Inline HTML</span><br><span class="line">文档中不允许使用html语句</span><br><span class="line">MD034 - Bare URL used</span><br><span class="line">单纯的链接地址需要用尖括号 (&lt;&gt;) 包裹，否则有些解释器不会解释为链接</span><br><span class="line">MD035 - Horizontal rule style</span><br><span class="line">创建水平线时整篇文档要统一，要和文档中第一次创建水平线使用的符号一致</span><br><span class="line">MD036 - Emphasis used instead of a heading</span><br><span class="line">不能用强调来代替标题 ****</span><br><span class="line">MD037 - Spaces inside emphasis markers</span><br><span class="line">强调的符号和文字之间不能有空格</span><br><span class="line">MD038 - Spaces inside code span elements</span><br><span class="line">当用单反引号创建代码段的时候，单反引号和它们之间的代码不能有空格，如果要把单反引号嵌入到代码段的首尾，创建代码段的单反引号和嵌入的单反引号间要有一个空格隔开</span><br><span class="line">MD039 - Spaces inside <span class="built_in">link</span> text</span><br><span class="line">链接名和包围它的中括号之间不能有空格，但链接名中间可以有空格</span><br><span class="line">MD040 - Fenced code blocks should have a language specified</span><br><span class="line">单独的代码块（此处是指上下用三个反引号包围的代码块）应该指定代码块的编程语言，这一点有助于解释器对代码进行代码高亮</span><br><span class="line">MD041 - First line <span class="keyword">in</span> file should be a top level heading</span><br><span class="line">文档的第一个非空行应该是文档最高级的标题，默认是1级标题</span><br><span class="line">MD042 - No empty links</span><br><span class="line">链接的地址不能为空</span><br><span class="line">MD043 - Required heading structure</span><br><span class="line">要求标题遵循一定的结构，默认是没有规定的结构</span><br><span class="line">MD044 - Proper names should have the correct capitalization</span><br><span class="line">指定一些名称，会检查它是否有正确的大写</span><br><span class="line">MD045 - Images should have alternate text (alt text) ** 图片链接必须包含描述文本</span><br><span class="line">MD046 - Code block style</span><br><span class="line">整篇文档采用一致的代码格式</span><br><span class="line">MD047 - Files should end with a single newline character</span><br><span class="line">文档末尾需要一个空行结尾</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>如何使用openocd烧录程序</title>
    <url>/archives/342954a3.html</url>
    <content><![CDATA[<h2 id="一、openocd介绍"><a href="#一、openocd介绍" class="headerlink" title="一、openocd介绍"></a>一、openocd介绍</h2><p>OpenOCD（Open On-Chip Debugger）是一个开源的片上调试器，旨在提供针对嵌入式设备的调试、系统编程和边界扫描功能。OpenOCD的功能需要调试仿真器来辅助完成，调试仿真器是一个提供调试目标电信号的小型硬件单元。常用的有JLink、STLink等，一些开发板直接集成了调试仿真器，如小熊派开发板就集成了STLink。</p>
<span id="more"></span>

<h2 id="二、openocd下载"><a href="#二、openocd下载" class="headerlink" title="二、openocd下载"></a>二、openocd下载</h2><p><a href="https://gnutoolchains.com/arm-eabi/openocd/">下载地址</a></p>
<h2 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h2><p>打开面板搜索环境变量<br><img src="/photos/openocd-img1.png" alt="环境变量"><br><img src="/photos/selfnew.png" alt="环境变量"><br><img src="/photos/new.png" alt="环境变量"></p>
<h2 id="四、openocd的使用"><a href="#四、openocd的使用" class="headerlink" title="四、openocd的使用"></a>四、openocd的使用</h2><h3 id="1、使用j-link下载在终端中可仿照如下命令"><a href="#1、使用j-link下载在终端中可仿照如下命令" class="headerlink" title="1、使用j-link下载在终端中可仿照如下命令"></a>1、使用j-link下载在终端中可仿照如下命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openocd -f D:/openocd/share/openocd/scripts/interface/jlink.cfg -c &#x27;transport select swd&#x27; -f D:/openocd/share/openocd/scripts/target/stm32f1x.cfg -c &#x27;program build/LED.elf verify reset exit&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/photos/openocd-cmd.png" alt="环境变量"></p>
<p>其中<strong>D:&#x2F;openocd&#x2F;share&#x2F;openocd&#x2F;scripts&#x2F;interface&#x2F;jlink.cfg</strong> 是安装openocd路径下j-link的配置文件；<br><img src="/photos/j-link-cfig.png" alt="环境变量"><br><strong>D:&#x2F;openocd&#x2F;share&#x2F;openocd&#x2F;scripts&#x2F;target&#x2F;stm32f1x.cfg</strong><br>则是下载到开板上对应芯片型号的配置文件；<br><img src="/photos/stm32f1-cfig.png" alt="环境变量"><br>在“<strong>program build&#x2F;LED.elf verify reset exit</strong>”中，build&#x2F;LED.elf为当前终端路径下，自己编译器生成的文件也可换成XXX.hex或者XXX.bin文件。<br>“<strong>transport select swd</strong>“选择的传输协议为：swd</p>
<p>使用其他下载器或者芯片可按照以上方法配置。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在vscode可通过tasks.json配置任务使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Download&quot;</span>,</span><br><span class="line">    <span class="string">&quot;command&quot;</span>:<span class="string">&quot;openocd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;-f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;D:/openocd/share/openocd/scripts/interface/jlink.cfg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transport select swd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;D:/openocd/share/openocd/scripts/target/stm32f1x.cfg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;program build/LED.elf verify reset exit&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;<span class="variable">$gcc</span>&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dependsOn&quot;</span>: <span class="string">&quot;Build&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>11、Qt程序打包</title>
    <url>/archives/6291345.html</url>
    <content><![CDATA[<p>Qt的应用程序编译出来之后,将单独的exe程序拿到其他PC上运行是运行不起来的,会提示缺少对应的动态链接库。我们需要去Qt的安装目录下找到所有的Qt程序运行时所依赖的，将他们和exe程序放到同一目录下，程序才可以执行。</p>
<p>根据上边的描述我们可以想象的到，如果手动去寻找应用程序依赖的动态库，这是一件非常麻烦的事情。其实我们完全没有必要这么辛苦，Qt给我们提供了一个寻找依赖项的工具windeployqt</p>
<p>Windeployqt的使用方法：<br> <span id="more"></span></p>
<p>如果我们一件配置好了环境变量，在dos下输入windeployqt会有相应的信息输出,否则需要指定该工具的完全路径才能够正常使用,例如:</p>
<p> C:&#x2F;Qt&#x2F;Qt5.5.0&#x2F;5.5&#x2F;mingw492_32&#x2F;bin&#x2F;windeployqt</p>
<p>​                               </p>
<p> <img src="/photos/image031.png" alt="Qt"></p>
<ul>
<li>把新生成的exe文件放到指定的目录下:</li>
</ul>
<p>例如: C:&#x2F;Users&#x2F;Kevin&#x2F;Desktop&#x2F;qt_test</p>
<p> <img src="/photos/image032.png" alt="Qt"></p>
<ul>
<li>在控制台窗口中通命令进入到上述目录中</li>
</ul>
<p> <img src="/photos/image033.png" alt="Qt"></p>
<ul>
<li>执行命令windeployqt 应用程序名(qttext.exe)</li>
</ul>
<p> <img src="/photos/image034.png" alt="Qt"></p>
<ul>
<li><p>应用程序所需的附加依赖项就会全部拷贝到我们指定的目录中</p>
<p><img src="/photos/image035.png" alt="Qt"></p>
</li>
</ul>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>10、数库操作</title>
    <url>/archives/6251621.html</url>
    <content><![CDATA[<h2 id="10-1-数据库操作"><a href="#10-1-数据库操作" class="headerlink" title="10.1 数据库操作"></a>10.1 数据库操作</h2><p><strong>Qt</strong> <strong>提供了 QtSQL 模块来提供平台独立的基于 SQL 的数据库操作。</strong>这里我们所说的“平台独立”，既包括操作系统平台，有包括各个数据库平台。另外，我们强调了“基于 SQL”，因为 NoSQL 数据库至今没有一个通用查询方法，所以不可能提供一种通用的 NoSQL 数据库的操作。<strong>Qt 的数据库操作还可以很方便的与 model&#x2F;view 架构进行整合。</strong>通常来说，我们对数据库的操作更多地在于对数据库表的操作，而这正是 model&#x2F;view 架构的长项。</p>
 <span id="more"></span>
<p><strong>Qt</strong> <strong>使用QSqlDatabase表示一个数据库连接。</strong>更底层上，Qt 使用驱动（drivers）来与不同的数据库 API 进行交互。Qt 桌面版本提供了如下几种驱动：</p>
<table>
<thead>
<tr>
<th>驱动</th>
<th>数据库</th>
</tr>
</thead>
<tbody><tr>
<td>QDB2</td>
<td>IBM DB2 (7.1 或更新版本)</td>
</tr>
<tr>
<td>QIBASE</td>
<td>Borland InterBase</td>
</tr>
<tr>
<td>QMYSQL</td>
<td>MySQL</td>
</tr>
<tr>
<td>QOCI</td>
<td>Oracle Call Interface Driver</td>
</tr>
<tr>
<td>QODBC</td>
<td>OpenDatabase Connectivity (ODBC) – Microsoft SQL Server 及其它兼容 ODBC 的数据库</td>
</tr>
<tr>
<td>QPSQL</td>
<td>PostgreSQL (7.3 或更新版本)</td>
</tr>
<tr>
<td>QSQLITE2</td>
<td>SQLite 2</td>
</tr>
<tr>
<td>QSQLITE</td>
<td>SQLite 3</td>
</tr>
<tr>
<td>QSYMSQL</td>
<td>针对 Symbian 平台的SQLite 3</td>
</tr>
<tr>
<td>QTDS</td>
<td>Sybase Adaptive Server (自  Qt 4.7 起废除)</td>
</tr>
</tbody></table>
<p>不过，由于受到协议的限制，Qt 开源版本并没有提供上面所有驱动的二进制版本，而仅仅以源代码的形式提供。通常，Qt 只默认搭载 QSqlite 驱动（这个驱动实际还包括 Sqlite 数据库，也就是说，如果需要使用 Sqlite 的话，只需要该驱动即可）。我们可以选择把这些驱动作为 Qt 的一部分进行编译，也可以当作插件编译。</p>
<p>如果习惯于使用 SQL 语句，我们可以选择QSqlQuery类；如果只需要使用高层次的数据库接口（不关心 SQL 语法），我们可以选择使用QsqlTableModel类。 </p>
<p>在使用时，我们可以通过</p>
<p>QSqlDatabase::drivers();</p>
<p>找到系统中所有可用的数据库驱动的名字列表。我们只能使用出现在列表中的驱动。由于默认情况下，QtSQL 是作为 Qt 的一个模块提供的。为了使用有关数据库的类，我们必须早 .pro 文件中添加这么一句：</p>
<p>QT +&#x3D; sql</p>
<p>这表示，我们的程序需要使用 Qt 的 core、gui 以及 SQL 三个模块。注意，如果需要同时使用 Qt4 和 Qt5 编译程序，通常我们的 .pro 文件是这样的：</p>
<p>QT +&#x3D; core gui sql</p>
<p>greaterThan(QT_MAJOR_VERSION, 4): QT +&#x3D; widgets</p>
<p>这两句也很明确：Qt 需要加载 core、gui 和 SQL 三个模块，如果主板本大于 4，则再添加 widgets 模块。</p>
<p>下面来看一个简单的函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">boo- <span class="built_in">connect</span>(<span class="type">const</span> QString &amp;dbName)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QSqlDatabase db = QSqlDatabase::<span class="built_in">addDatabase</span>(<span class="string">&quot;QSQLITE&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  db.setHostName(&quot;host&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  db.setDatabaseName(&quot;dbname&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  db.setUserName(&quot;username&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  db.setPassword(&quot;password&quot;);</span></span><br><span class="line"></span><br><span class="line">  db.<span class="built_in">setDatabaseName</span>(dbName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!db.<span class="built_in">open</span>()) &#123;</span><br><span class="line"></span><br><span class="line">​    QMessageBox::<span class="built_in">critical</span>(<span class="number">0</span>, QObject::<span class="built_in">tr</span>(<span class="string">&quot;Database Error&quot;</span>),</span><br><span class="line"></span><br><span class="line">​               db.<span class="built_in">lastError</span>().<span class="built_in">text</span>());</span><br><span class="line"></span><br><span class="line">​    retur- <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  retur- <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们使用connect()函数创建一个数据库连接。我们使用QSqlDatabase::addDatabase()静态函数完成这一请求，也就是创建了一个QSqlDatabase实例。注意，数据库连接使用自己的名字进行区分，而不是数据库的名字。例如，我们可以使用下面的语句：</p>
<p>QSqlDatabase db&#x3D;QSqlDatabase::addDatabase(“QSQLITE”,</p>
<p> QString(“con%1”).arg(dbName));</p>
<p>此时，我们是使用addDatabase()函数的第二个参数来给这个数据库连接一个名字。在这个例子中，用于区分这个数据库连接的名字是QString(“conn%1”).arg(dbName)，而不是 “QSQLITE”。这个参数是可选的，如果不指定，系统会给出一个默认的名字QSqlDatabase::defaultConnection，此时，Qt 会创建一个默认的连接。如果你给出的名字与已存在的名字相同，新的连接会替换掉已有的连接。通过这种设计，我们可以为一个数据库建立多个连接。</p>
<p>我们这里使用的是 sqlite 数据库，只需要指定数据库名字即可。如果是数据库服务器，比如 MySQL，我们还需要指定主机名、端口号、用户名和密码，这些语句使用注释进行了简单的说明。</p>
<p>接下来我们调用了<strong>QSqlDatabase类的open()函数，打开这个数据库连接</strong>。通过检查open()函数的返回值，我们可以判断数据库是不是正确打开。</p>
<p>QtSQL 模块中的类大多具有lastError()函数，用于检查最新出现的错误。如果你发现数据库操作有任何问题，应该使用这个函数进行错误的检查。这一点我们也在上面的代码中进行了体现。当然，这只是最简单的实现，一般来说，更好的设计是，不要在数据库操作中混杂界面代码（并且将这个connect()函数放在一个专门的数据库操作类中）。接下来我们可以在main()函数中使用这个connect()函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">connect</span>(<span class="string">&quot;demo.db&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">​    QSqlQuery query;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (!query.<span class="built_in">exec</span>(<span class="string">&quot;CREATE TABLE student (&quot;</span></span><br><span class="line"></span><br><span class="line">​            <span class="string">&quot;id INT PRIMARY KEY AUTOINCREMENT,&quot;</span></span><br><span class="line"></span><br><span class="line">​            <span class="string">&quot;name VARCHAR(255),&quot;</span></span><br><span class="line"></span><br><span class="line">​            <span class="string">&quot;age INT)&quot;</span>)) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​      QMessageBox::<span class="built_in">critical</span>(<span class="number">0</span>, </span><br><span class="line"></span><br><span class="line">QObject::<span class="built_in">tr</span>(<span class="string">&quot;Database Error&quot;</span>), </span><br><span class="line"></span><br><span class="line">query.<span class="built_in">lastError</span>().<span class="built_in">text</span>());</span><br><span class="line"></span><br><span class="line">​      retur- <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​    retur- <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  retur- a.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main()函数中，我们调用这个connect()函数打开数据库。如果打开成功，我们通过一个QSqlQuery实例执行了 SQL 语句。同样，我们使用其lastError()函数检查了执行结果是否正确。</p>
<p>注意这里的QSqlQuery实例的创建。我们并没有指定是为哪一个数据库连接创建查询对象，此时，系统会使用默认的连接，也就是使用没有第二个参数的addDatabase()函数创建的那个连接（其实就是名字为QSqlDatabase::defaultConnection的默认连接）。如果没有这么一个连接，系统就会报错。也就是说，如果没有默认连接，我们在创建QSqlQuery对象时必须指明是哪一个QSqlDatabase对象，也就是addDatabase()的返回值。</p>
<p>我们还可以通过使用QSqlQuery::isActive()函数检查语句执行正确与否。如果QSqlQuery对象是活动的，该函数返回 true。所谓“活动”，就是指该对象成功执行了exec()函数，但是还没有完成。这里需要注意的是，如果存在一个活动的 SELECT 语句，某些数据库系统不能成功完成connect()或者rollback()函数的调用。此时，我们必须首先将活动的 SELECT 语句设置成不活动的。</p>
<p>创建过数据库表 student 之后，我们开始插入数据，然后将其独取出来：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(<span class="string">&quot;demo.db&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">  QSqlQuery query;</span><br><span class="line"></span><br><span class="line">  query.<span class="built_in">prepare</span>(<span class="string">&quot;INSERT INTO student (name, age) VALUES (?, ?)&quot;</span>);</span><br><span class="line"></span><br><span class="line">  QVariantList names;</span><br><span class="line"></span><br><span class="line">  names &lt;&lt; <span class="string">&quot;Tom&quot;</span> &lt;&lt; <span class="string">&quot;Jack&quot;</span> &lt;&lt; <span class="string">&quot;Jane&quot;</span> &lt;&lt; <span class="string">&quot;Jerry&quot;</span>;</span><br><span class="line"></span><br><span class="line">  query.<span class="built_in">addBindValue</span>(names);</span><br><span class="line"></span><br><span class="line">  QVariantList ages;</span><br><span class="line"></span><br><span class="line">  ages &lt;&lt; <span class="number">20</span> &lt;&lt; <span class="number">23</span> &lt;&lt; <span class="number">22</span> &lt;&lt; <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">  query.<span class="built_in">addBindValue</span>(ages);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!query.<span class="built_in">execBatch</span>()) &#123;</span><br><span class="line"></span><br><span class="line">​    QMessageBox::<span class="built_in">critical</span>(<span class="number">0</span>, QObject::<span class="built_in">tr</span>(<span class="string">&quot;Database Error&quot;</span>),</span><br><span class="line"></span><br><span class="line">​               query.<span class="built_in">lastError</span>().<span class="built_in">text</span>());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  query.<span class="built_in">exec</span>(<span class="string">&quot;SELECT name, age FROM student&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (query.<span class="built_in">next</span>()) &#123;</span><br><span class="line"></span><br><span class="line">​    QString name = query.<span class="built_in">value</span>(<span class="number">0</span>).<span class="built_in">toString</span>();</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> age = query.<span class="built_in">value</span>(<span class="number">1</span>).<span class="built_in">toInt</span>();</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">qDebug</span>() &lt;&lt; name &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; age;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">  retur- <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依旧连接到我们创建的 demo.db 数据库。我们需要插入多条数据，此时可以使用QSqlQuery::exec()函数一条一条插入数据，但是这里我们选择了另外一种方法：批量执行。首先，我们使用<strong>QSqlQuery::prepare()函数对这条 SQL 语句进行预处理，问号 ? 相当于占位符，预示着以后我们可以使用实际数据替换这些位置。</strong>简单说明一下，预处理是数据库提供的一种特性，它会将 SQL 语句进行编译，性能和安全性都要优于普通的 SQL 处理。在上面的代码中，我们使用一个字符串列表 names 替换掉第一个问号的位置，一个整型列表 ages 替换掉第二个问号的位置，利用<strong>QSqlQuery::addBindValue()我们将实际数据绑定到这个预处理的 SQL 语句上</strong>。需要注意的是，names 和 ages 这两个列表里面的数据需要一一对应。然后我们调用<strong>QSqlQuery::execBatch()批量执行 SQL，之后结束该对象。</strong>这样，插入操作便完成了。</p>
<p>另外说明一点，我们这里使用了 ODBC 风格的 ? 占位符，同样，我们也可以使用 Oracle 风格的占位符：</p>
<p>query.prepare(“INSERT INTO student (name, age) VALUES (:name, :age)”);</p>
<p>此时，我们就需要使用</p>
<p>query.bindValue(“:name”, names);</p>
<p>query.bindValue(“:age”, ages);</p>
<p>进行绑定。Oracle 风格的绑定最大的好处是，绑定的名字和值很清晰，与顺序无关。但是这里需要注意，bindValue()函数只能绑定一个位置。比如</p>
<p>query.prepare(“INSERT INTO test (name1, name2) </p>
<p>VALUES (:name, :name)”);</p>
<p>&#x2F;&#x2F; …</p>
<p>query.bindValue(“:name”, name);</p>
<p>只能绑定第一个 :name 占位符，不能绑定到第二个。</p>
<p>接下来我们依旧使用同一个查询对象执行一个 SELECT 语句。如果存在查询结果，QSqlQuery::next()会返回 true，直到到达结果最末，返回 false，说明遍历结束。我们利用这一点，使用 while 循环即可遍历查询结果。使用QSqlQuery::value()函数即可按照 SELECT 语句的字段顺序获取到对应的数据库存储的数据。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">query.<span class="built_in">exec</span>(“select name, age from student”);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>（query.<span class="built_in">next</span>()）</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QString name = query.<span class="built_in">value</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  QString age = query.<span class="built_in">value</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于数据库事务的操作，我们可以使用 QSqlDatabase::transaction() 开启事务，QSqlDatabase::commit() 或者QSqlDatabase::rollback() 结束事务。使用QSqlDatabase::database()函数则可以根据名字获取所需要的数据库连接。</p>
<h2 id="10-2-使用模型操作数据库"><a href="#10-2-使用模型操作数据库" class="headerlink" title="10.2 使用模型操作数据库"></a>10.2 使用模型操作数据库</h2><p>上一节我们使用 SQL 语句完成了对数据库的常规操作，包括简单的 CREATE、SELECT 等语句的使用。我们也提到过，Qt 不仅提供了这种使用 SQL 语句的方式，还提供了一种基于模型的更高级的处理方式。这种<strong>基于QSqlTableModel的模型处理更为高级，如果对 SQL 语句不熟悉，并且不需要很多复杂的查询，这种QSqlTableModel模型基本可以满足一般的需求。</strong>本节我们将介绍QSqlTableModel的一般使用，对比 SQL 语句完成对数据库的增删改查等的操作。值得注意的是，QSqlTableModel并不一定非得结合 QListView或QTableView使用，我们完全可以用其作一般性处理。</p>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>首先我们来看看如何使用QSqlTableModel进行 SELECT 操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(<span class="string">&quot;demo.db&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">  QSqlTableModelmodel;</span><br><span class="line"></span><br><span class="line">  model.<span class="built_in">setTable</span>(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">  model.<span class="built_in">setFilter</span>(<span class="string">&quot;age &gt; 20 and age &lt; 25&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (model.<span class="built_in">select</span>()) &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; model.<span class="built_in">rowCount</span>(); ++i) &#123;</span><br><span class="line"></span><br><span class="line">​      QSqlRecord record = model.<span class="built_in">record</span>(i);</span><br><span class="line"></span><br><span class="line">​      QString name = record.<span class="built_in">value</span>(<span class="string">&quot;name&quot;</span>).<span class="built_in">toString</span>();</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> age = record.<span class="built_in">value</span>(<span class="string">&quot;age&quot;</span>).<span class="built_in">toInt</span>();</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">qDebug</span>() &lt;&lt; name &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; age;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">  retur- <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们依旧使用了上一节的connect()函数。接下来我们创建了QSqlTableModel实例，</p>
<ul>
<li><p>setTable()函数设置所需要操作的表格；</p>
</li>
<li><p>setFilter()函数则是添加过滤器，也就是 WHERE 语句所需要的部分。</p>
</li>
</ul>
<p>例如上面代码中的操作实际相当于 SQL 语句</p>
<p>SELECT * FROM student WHERE age &gt; 20 and age &lt; 25</p>
<p>使用QSqlTableModel::select()函数进行操作，也就是执行了查询操作。如果查询成功，函数返回 true，由此判断是否发生了错误。如果没有错误，我们使用record()函数取出一行记录，该记录是以QSqlRecord的形式给出的，而QSqlRecord::value()则取出一个列的实际数据值。注意，由于QSqlTableModel没有提供const_iterator遍历器，因此不能使用foreach宏进行遍历。</p>
<p>另外需要注意，由于QSqlTableModel只是一种高级操作，肯定没有实际 SQL 语句方便。具体来说，<strong>我们使用QSqlTableModel只能进行 SELECT  的查询，不能只查询其中某些列的数据。</strong></p>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>下面一段代码则显示了如何使用QSqlTableModel进行插入操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QSqlTableModelmodel;</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setTable</span>(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">insertRows</span>(row, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setData</span>(model.<span class="built_in">index</span>(row, <span class="number">1</span>), <span class="string">&quot;Cheng&quot;</span>);</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setData</span>(model.<span class="built_in">index</span>(row, <span class="number">2</span>), <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">submitAll</span>();</span><br></pre></td></tr></table></figure>

<p>插入也很简单：model.insertRows(row, 1);说明我们想在索引 0 的位置插入 1 行新的数据。使用<strong>setData()函数则开始准备实际需要插入的数据</strong>。注意这里我们向 row 的第一个位置写入 Cheng（通过model.index(row, 1)，回忆一下，我们把 Model当作一个二维表，这个坐标相当于第 row 行第 1 列），其余以此类推。最后，调用<strong>submitAll()函数提交所有修改</strong>。这里执行的操作可以用如下 SQL 表示：</p>
<p>INSERT INTO student (name, age) VALUES (‘Cheng’, 24)</p>
<h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><p>当我们取出了已经存在的数据后，对其进行修改，然后重新写入数据库，即完成了一次更新操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QSqlTableModelmodel;</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setTable</span>(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setFilter</span>(<span class="string">&quot;age = 25&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (model.<span class="built_in">select</span>()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (model.<span class="built_in">rowCount</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">​    QSqlRecord record = model.<span class="built_in">record</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">​    record.<span class="built_in">setValue</span>(<span class="string">&quot;age&quot;</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">​    model.<span class="built_in">setRecord</span>(<span class="number">0</span>, record);</span><br><span class="line"></span><br><span class="line">​    model.<span class="built_in">submitAll</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码中，我们首先找到 age &#x3D; 25 的记录，然后将 age 重新设置为 26，存入相同的位置（在这里都是索引 0 的位置），提交之后完成一次更新。当然，我们也可以类似其它模型一样的设置方式：setData()函数。具体代码片段如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (model.<span class="built_in">select</span>()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (model.<span class="built_in">rowCount</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">​    model.<span class="built_in">setData</span>(model.<span class="built_in">index</span>(<span class="number">0</span>, <span class="number">2</span>), <span class="number">26</span>);</span><br><span class="line">​     model.<span class="built_in">submitAll</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意我们的 age 列是第 3 列，索引值为 2，因为前面还有 id 和 name 两列。这里的更新操作则可以用如下 SQL 表示：</p>
<p>UPDATE student SET age &#x3D; 26 WHERE age &#x3D; 25</p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除操作同更新类似：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QSqlTableModelmodel;</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setTable</span>(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">setFilter</span>(<span class="string">&quot;age = 25&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (model.<span class="built_in">select</span>()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (model.<span class="built_in">rowCount</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">​    model.<span class="built_in">removeRows</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​    model.<span class="built_in">submitAll</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用 SQL 则是：</p>
<p>DELETE FROM student WHERE age &#x3D; 25</p>
<p>当我们看到removeRows()函数就应该想到：我们可以一次删除多行。事实也正是如此，这里不再赘述。</p>
<h2 id="10-3-可视化显示数据库数据"><a href="#10-3-可视化显示数据库数据" class="headerlink" title="10.3 可视化显示数据库数据"></a>10.3 可视化显示数据库数据</h2><p>前面我们用了两个章节介绍了 Qt 提供的两种操作数据库的方法。显然，使用QSqlQuery的方式更灵活，功能更强大，而使用QSqlTableModel则更简单，更方便与 model&#x2F;view 结合使用（数据库应用很大一部分就是以表格形式显示出来，这正是 model&#x2F;view 的强项）。本章我们简单介绍使用QSqlTableModel显示数据的方法。当然，我们也可以选择使用QSqlQuery获取数据，然后交给 view 显示，而这需要自己给 Model提供数据。</p>
<p>我们还是使用前面一直在用的 student 表，直接来看代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">connect</span>(<span class="string">&quot;demo.db&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">​    QSqlTableModel*Model= <span class="keyword">new</span> QSqlTableModel;</span><br><span class="line"></span><br><span class="line">​    model-&gt;<span class="built_in">setTable</span>(<span class="string">&quot;student&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    model-&gt;<span class="built_in">setSort</span>(<span class="number">1</span>, Qt::AscendingOrder);</span><br><span class="line"></span><br><span class="line">​    model-&gt;<span class="built_in">setHeaderData</span>(<span class="number">1</span>, Qt::Horizontal, <span class="string">&quot;Name&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    model-&gt;<span class="built_in">setHeaderData</span>(<span class="number">2</span>, Qt::Horizontal, <span class="string">&quot;Age&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    model-&gt;<span class="built_in">select</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    QTableView *view = <span class="keyword">new</span> QTableView;</span><br><span class="line"></span><br><span class="line">​    view-&gt;<span class="built_in">setModel</span>(model);</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">view-&gt;<span class="built_in">setSelectionMode</span>(QAbstractItemView::SingleSelection);</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">view-&gt;<span class="built_in">setSelectionBehavior</span>(QAbstractItemView::SelectRows);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   view-&gt;setColumnHidden(0, true);</span></span><br><span class="line"></span><br><span class="line">​    view-&gt;<span class="built_in">resizeColumnsToContents</span>();</span><br><span class="line"></span><br><span class="line">​    view-&gt;<span class="built_in">setEditTriggers</span>(QAbstractItemView::NoEditTriggers);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    QHeaderView *header = view-&gt;<span class="built_in">horizontalHeader</span>();</span><br><span class="line"></span><br><span class="line">​    header-&gt;<span class="built_in">setStretchLastSection</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    view-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​    retur- <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  retur- a.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里的connect()函数还是我们前面使用过的（11.1），</p>
<p>我们在main()函数中创建了QSqlTableModel对象，使用 student 表。student 表有三列：id，name 和 age，我们选择按照 name 排序，使用setSort()函数达到这一目的。然后我们设置每一列的列头。这里我们只使用了后两列，第一列没有设置，所以依旧显示为列名 id。</p>
<p>在设置好 Model之后，我们又创建了QTableView对象作为视图。注意这里的设置：单行选择，按行选择。resizeColumnsToContents()说明每列宽度适配其内容；setEditTriggers()则禁用编辑功能。最后，我们设置最后一列要充满整个窗口。我们的代码中有一行注释，设置第一列不显示。</p>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>9、多线程</title>
    <url>/archives/6231331.html</url>
    <content><![CDATA[<p>通常情况下，应用程序都是在一个线程中执行操作。但是，当调用一个耗时操作（例如，大批量I&#x2F;O或大量矩阵变换等CPU密集操作）时，用户界面常常会冻结。而使用多线程可以解决这一问题。</p>
<p>多线程有以下几个优势：<br> <span id="more"></span></p>
<ul>
<li>提高应用程序响应速度。</li>
</ul>
<p>这对于图形界面开发的程序尤为重要，当一个操作耗时很长时，整个系统都会等待这个操作，程序就不能响应键盘、鼠标、菜单等操作，而使用多线程技术可将耗时长的操作置于一个新的线程，避免以上问题。</p>
<ul>
<li>使多CPU系统更加有效。</li>
</ul>
<p>当前线程数不大于CPU数目时，操作系统可以调度不同的线程运行于不同的CPU上。</p>
<ul>
<li>改善程序结构。</li>
</ul>
<p>一个既长又复杂的进程可以考虑分为多个线程，成为独立或半独立的运行部分，这样有利于代码的理解和维护。</p>
<p>多线程程序有以下几个特点：</p>
<ul>
<li><p>多线程程序的行为无法预期，当多次执行程序时，每一次的结果都可能不同。</p>
</li>
<li><p>多线程的执行顺序无法保证，它与操作系统的调度策略和线程优先级等因素有关。</p>
</li>
<li><p>多线程的切换可能发生在任何时刻、任何地点。</p>
</li>
<li><p>多线程对代码的敏感度高，对代码的细微修改都可能产生意想不到的结果。</p>
</li>
</ul>
<p>基于以上这些特点，为了有效的使用线程，开发人员必须对其进行控制。</p>
<h2 id="9-1-线程介绍"><a href="#9-1-线程介绍" class="headerlink" title="9.1 线程介绍"></a>9.1 线程介绍</h2><p>在Qt中使用QThread 来管理线程。下面来看一个简单的例子:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line"></span><br><span class="line">  : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QWidget *widget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  QVBoxLayout *layout = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line"></span><br><span class="line">  widget-&gt;<span class="built_in">setLayout</span>(layout);</span><br><span class="line"></span><br><span class="line">  QLCDNumber *lcdNu<span class="comment">///mber = new QLCDNumber(this);</span></span><br><span class="line"></span><br><span class="line">  layout-&gt;<span class="built_in">addWidget</span>(lcdNumber);</span><br><span class="line"></span><br><span class="line">  QPushButton *button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">tr</span>(<span class="string">&quot;Start&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  layout-&gt;<span class="built_in">addWidget</span>(button);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setCentralWidget</span>(widget);</span><br><span class="line"></span><br><span class="line">  QTimer *timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [=]() &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">static</span> <span class="type">int</span> sec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    lcdNumber-&gt;<span class="built_in">display</span>(QString::<span class="built_in">number</span>(sec++));</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">connect</span>(button, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line"></span><br><span class="line">​    timer-&gt;<span class="built_in">start</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000000000</span>; i++);</span><br><span class="line"></span><br><span class="line">​    timer-&gt;<span class="built_in">stop</span>();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们的主界面有一个用于显示时间的 LCD 数字面板还有一个用于启动任务的按钮。程序的目的是用户点击按钮，开始一个非常耗时的运算（程序中我们以一个 2000000000 次的循环来替代这个非常耗时的工作，在真实的程序中，这可能是一个网络访问，可能是需要复制一个很大的文件或者其它任务），同时 LCD 开始显示逝去的毫秒数。毫秒数通过一个计时器QTimer进行更新。计算完成后，计时器停止。这是一个很简单的应用，也看不出有任何问题。但是当我们开始运行程序时，问题就来了：点击按钮之后，程序界面直接停止响应，直到循环结束才开始重新更新。</p>
<p>有经验的开发者立即指出，这里需要使用线程。这是因为 Qt 中所有界面都是在 UI 线程中（也被称为主线程，就是执行了QApplication::exec()的线程），在这个线程中执行耗时的操作（比如那个循环），就会阻塞 UI 线程，从而让界面停止响应。界面停止响应，用户体验自然不好，不过更严重的是，有些窗口管理程序会检测到你的程序已经失去响应，可能会建议用户强制停止程序，这样一来你的程序可能就此终止，任务再也无法完成。所以，为了避免这一问题，我们要使用 QThread 开启一个新的线程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerThread</span> : <span class="keyword">public</span> QThread</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">WorkerThread</span>(QObject *parent = <span class="number">0</span>)</span><br><span class="line">​    : <span class="built_in">QThread</span>(parent)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++);</span><br><span class="line">​    <span class="function">emit <span class="title">done</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">signals:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">done</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line"></span><br><span class="line">  : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  QWidget *widget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  QVBoxLayout *layout = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line"></span><br><span class="line">  widget-&gt;<span class="built_in">setLayout</span>(layout);</span><br><span class="line"></span><br><span class="line">  lcdNumber = <span class="keyword">new</span> <span class="built_in">QLCDNumber</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  layout-&gt;<span class="built_in">addWidget</span>(lcdNumber);</span><br><span class="line"></span><br><span class="line">  QPushButton *button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">tr</span>(<span class="string">&quot;Start&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  layout-&gt;<span class="built_in">addWidget</span>(button);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setCentralWidget</span>(widget);</span><br><span class="line">  QTimer *timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [=]() &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">static</span> <span class="type">int</span> sec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    lcdNumber-&gt;<span class="built_in">display</span>(QString::<span class="built_in">number</span>(sec++));</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  WorkerThread *thread = <span class="keyword">new</span> <span class="built_in">WorkerThread</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(thread, &amp;WorkerThread::done, timer, &amp;QTimer::stop);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(thread, &amp;WorkerThread::finished, </span><br><span class="line"></span><br><span class="line">thread, &amp;WorkerThread::deleteLater);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(button, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line"></span><br><span class="line">​    timer-&gt;<span class="built_in">start</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​    thread-&gt;<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意，我们增加了一个WorkerThread类。WorkerThread继承自QThread类，重写了其run()函数。我们可以认为，<strong>run()函数就是新的线程需要执行的代码</strong>。在这里就是要执行这个循环，然后发出计算完成的信号。<strong>run()是线程的入口，就像main()对于应用程序的作用，使用QThread::start()函数启动一个线程</strong>（注意，这里不是run()函数）。再次运行程序，你会发现现在界面已经不会被阻塞了。另外，<strong>我们将WorkerThread::deleteLater()函数与WorkerThread::finished()信号连接起来，当线程完成时，系统可以帮我们清除线程实例。</strong>这里的finished()信号是系统发出的，与我们自定义的done()信号无关。</p>
<p>这是 Qt 线程的最基本的使用方式之一（确切的说，这种方式已经不大推荐使用，不过因为看起来很清晰，而且简单使用起来也没有什么问题，所以还是有必要介绍）。代码看起来很简单，不过，如果你认为 Qt 的多线程编程也很简单，那就大错特错了。Qt 多线程的优势设计使得它使用起来变得容易，但是坑很多，稍不留神就会被绊住，尤其是涉及到与 QObject 交互的情况。稍懂多线程开发的童鞋都会知道，调试多线程开发简直就是煎熬。</p>
<h2 id="9-2-多线程的使用"><a href="#9-2-多线程的使用" class="headerlink" title="9.2 多线程的使用"></a>9.2 多线程的使用</h2><p>在Qt4.7及以后版本推荐使用以下的工作方式。其主要特点就是利用Qt的事件驱动特性，将<strong>需要在次线程中处理的业务放在独立的模块（类）中，由主线程创建完该对象后，将其移交给指定的线程，且可以将多个类似的对象移交给同一个线程。</strong>在这个例子中，信号由主线程的QTimer对象发出，之后Qt会将关联的事件放到worker所属线程的事件队列。由于队列连接的作用，在不同线程间连接信号和槽是很安全的。</p>
<p>示例代码如下：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">class Worker : public QObject</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line">private slots:</span><br><span class="line"></span><br><span class="line">  void onTimeout()</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    qDebug()&lt;&lt;<span class="string">&quot;Worker::onTimeout get called from?: &quot;</span></span><br><span class="line">	&lt;&lt;QThread::currentThreadId();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, char *argv[])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QApplication a(argc, argv);</span><br><span class="line"></span><br><span class="line">  qDebug()&lt;&lt;<span class="string">&quot;From mai- thread: &quot;</span>&lt;&lt;QThread::currentThreadId();</span><br><span class="line">  QThread t;</span><br><span class="line"></span><br><span class="line">  QTimer <span class="keyword">timer</span>;</span><br><span class="line"></span><br><span class="line">  Worker worker;</span><br><span class="line">  QObject::connect(&amp;<span class="keyword">timer</span>, SIGNAL(timeout()), </span><br><span class="line">	&amp;worker, SLOT(onTimeout()));</span><br><span class="line">  // 启动定时器</span><br><span class="line">  <span class="keyword">timer</span>.start(<span class="number">1000</span>);</span><br><span class="line">  // 将类对象移交个线程</span><br><span class="line">  worker.moveToThread(&amp;t);</span><br><span class="line">  // 启动线程</span><br><span class="line">  t.start();</span><br><span class="line">  retur- a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于Qobject类的connect函数最后一个参数，连接类型：</p>
<ul>
<li><p>自动连接(AutoConnection)，默认的连接方式。</p>
</li>
<li><p>如果信号与槽，也就是发送者与接受者在同一线程，等同于直接连接；</p>
</li>
<li><p>如果发送者与接受者处在不同线程，等同于队列连接。</p>
</li>
<li><p>直接连接(DirectConnection)</p>
</li>
</ul>
<p>当信号发射时，槽函数立即直接调用。<strong>无论槽函数所属对象在哪个线程，槽函数总在发送者所在线程执行。</strong></p>
<ul>
<li>队列连接(QueuedConnection)</li>
</ul>
<p>当控制权回到接受者所在线程的事件循环时，槽函数被调用。<strong>槽函数在接受者所在线程执行。</strong></p>
<p><strong>总结：</strong></p>
<p>&#x2F;* <strong>队列连接：槽函数在接受者所在线程执行</strong>。</p>
<p>&#x2F;* <strong>直接连接：槽函数在发送者所在线程执行</strong>。</p>
<p>***** <strong>自动连接：二者不在同一线程时，等同于队列连接</strong></p>
<p><strong>多线程使用过程中注意事项：</strong></p>
<ul>
<li><p><strong>线程不能操作UI对象（从Qwidget直接或间接派生的窗口对象）</strong></p>
</li>
<li><p><strong>需要移动到子线程中处理的模块类，创建的对象的时候不能指定父对象。</strong></p>
</li>
</ul>
<h2 id="9-3-使用线程绘图"><a href="#9-3-使用线程绘图" class="headerlink" title="9.3 使用线程绘图"></a>9.3 使用线程绘图</h2><p>根据前面讲过的知识,实现以下案例:</p>
<p>在窗口中有一个按钮,当点击按钮之后,在线程中绘制一张图片,然后将绘制好的图片显示到当前窗口中。</p>
<p>实现步骤：</p>
<p>将需要房屋线程中的操作放入单独的一个类中去处理：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Work</span> : <span class="keyword">public</span> QObject</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Work</span>(QObject *parent = <span class="number">0</span>) : <span class="built_in">QObject</span>(parent)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">slotDrawImage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="function">QImage <span class="title">image</span><span class="params">(<span class="number">600</span>, <span class="number">600</span>, QImage::Format_ARGB32)</span></span>;</span><br><span class="line"></span><br><span class="line">​    <span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;image)</span></span>;</span><br><span class="line"></span><br><span class="line">​    QPoint pt[] =</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">QPoint</span>(<span class="built_in">qrand</span>()%<span class="number">590</span>, <span class="built_in">qrand</span>()%<span class="number">590</span>),</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">QPoint</span>(<span class="built_in">qrand</span>()%<span class="number">590</span>, <span class="built_in">qrand</span>()%<span class="number">590</span>),</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">QPoint</span>(<span class="built_in">qrand</span>()%<span class="number">590</span>, <span class="built_in">qrand</span>()%<span class="number">590</span>),</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">QPoint</span>(<span class="built_in">qrand</span>()%<span class="number">590</span>, <span class="built_in">qrand</span>()%<span class="number">590</span>),</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">QPoint</span>(<span class="built_in">qrand</span>()%<span class="number">590</span>, <span class="built_in">qrand</span>()%<span class="number">590</span>),</span><br><span class="line"></span><br><span class="line">​    &#125;;</span><br><span class="line"></span><br><span class="line">​    painter.<span class="built_in">drawPolygon</span>(pt, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 将画好的图片通过信号发送出去</span></span><br><span class="line"></span><br><span class="line">​    <span class="function">emit <span class="title">ImageDone</span><span class="params">(image)</span></span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">ImageDone</span><span class="params">(QImage image)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在UI线程中(主线程)中创建Work类对象, 并调用moveToThread函数将操作移入到子线程中取处理.</p>
<p>&#x2F;&#x2F; 头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">MyWidget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">MyWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  Ui::MyWidget *ui;</span><br><span class="line"></span><br><span class="line">  QImage m_image;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源文件</span></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent) :</span><br><span class="line"></span><br><span class="line">  <span class="built_in">QWidget</span>(parent),</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  Work* pWork = <span class="keyword">new</span> Work;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(ui-&gt;draw, &amp;QPushButton::clicked, </span><br><span class="line"></span><br><span class="line">  pWork, &amp;Work::slotDrawImage);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  QThread * pthread = <span class="keyword">new</span> <span class="built_in">QThread</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将操作移入子线程中处理</span></span><br><span class="line"></span><br><span class="line">  pWork-&gt;<span class="built_in">moveToThread</span>(pthread);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动子线程</span></span><br><span class="line"></span><br><span class="line">  pthread-&gt;<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(pWork, &amp;Work::ImageDone, [=](QImage image)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 保存图片</span></span><br><span class="line"></span><br><span class="line">​    m_image = image;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 刷新窗口</span></span><br><span class="line"></span><br><span class="line">​    <span class="built_in">update</span>();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(<span class="keyword">this</span>, &amp;MyWidget::destroyed, [=]()</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 退出线程</span></span><br><span class="line"></span><br><span class="line">​    pthread-&gt;<span class="built_in">quit</span>();</span><br><span class="line"></span><br><span class="line">​    pthread-&gt;<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">delete</span> pWork;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果需要在窗口中绘制图形,那么就需要重写paintEvent事件处理函数。通过QPainter对象将子线程中绘制的图片画到当前窗口中。如果需要刷新窗口可以调用update（）函数，时间处理器会自动被调用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::paintEvent</span><span class="params">(QPaintEvent *e)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPainter <span class="title">p</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  p.<span class="built_in">drawImage</span>(<span class="number">0</span>, <span class="number">0</span>, m_image);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>8、Socket通信</title>
    <url>/archives/6211508.html</url>
    <content><![CDATA[<p>Qt中提供的所有的Socket类都是非阻塞的。</p>
<p>Qt中常用的用于socket通信的套接字类:<br> <span id="more"></span></p>
<ul>
<li>QTcpServer</li>
</ul>
<p>用于TCP&#x2F;IP通信, 作为服务器端套接字使用</p>
<ul>
<li>QTcpSocket</li>
</ul>
<p>用于TCP&#x2F;IP通信，作为客户端套接字使用。</p>
<ul>
<li>QUdpSocket</li>
</ul>
<p>用于UDP通信，服务器，客户端均使用此套接字。</p>
<h2 id="8-1-TCP-x2F-IP"><a href="#8-1-TCP-x2F-IP" class="headerlink" title="8.1 TCP&#x2F;IP"></a>8.1 TCP&#x2F;IP</h2><p>在Qt中实现TCP&#x2F;IP服务器端通信的流程:</p>
<ul>
<li><p>创建套接字</p>
</li>
<li><p>将套接字设置为监听模式</p>
</li>
<li><p>等待并接受客户端请求</p>
</li>
</ul>
<p>可以通过QTcpServer提供的void <strong>newConnection()</strong> <strong>信号</strong>来检测是否有连接请求，如果有可以在对应的槽函数中调用nextPendingConnection函数获取到客户端的Socket信息（返回值为QTcpSocket*类型指针），通过此套接字与客户端之间进行通信。</p>
<ul>
<li><p>接收或者向客户端发送数据</p>
</li>
<li><p>接收数据：使用read（）或者readAll（）函数</p>
</li>
<li><p>发送数据：使用write（）函数</p>
</li>
</ul>
<p>客户端通信流程:</p>
<ul>
<li><p>创建套接字</p>
</li>
<li><p>连接服务器</p>
</li>
</ul>
<p>可以使用QTcpSocket类的<strong>connectToHost（）</strong>函数来连接服务器。</p>
<ul>
<li>向服务器发送或者接受数据</li>
</ul>
<p>下面例子为简单的TCP&#x2F;IP通信的实现:</p>
<h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">通过Qt提供的QTcpServer类实现服务器端的socket通信:</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------- tcpserver.h ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCPServer</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">TCPServer</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">TCPServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">slotNewConnection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">slotReadyRead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  Ui::TCPServer *ui;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 负责监听的套接字</span></span><br><span class="line"></span><br><span class="line">  QTcpServer* m_server;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 负责通信的套接字</span></span><br><span class="line"></span><br><span class="line">  QTcpSocket* m_client;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------- tcpserver.cpp ------------</span></span><br><span class="line"></span><br><span class="line">TCPServer::<span class="built_in">TCPServer</span>(QWidget *parent) :</span><br><span class="line"></span><br><span class="line">  <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::TCPServer),</span><br><span class="line"></span><br><span class="line">  <span class="built_in">m_server</span>(<span class="literal">NULL</span>),</span><br><span class="line"></span><br><span class="line">  <span class="built_in">m_client</span>(<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建套接字对象</span></span><br><span class="line"></span><br><span class="line">  m_server = <span class="keyword">new</span> <span class="built_in">QTcpServer</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将套接字设置为监听模式</span></span><br><span class="line"></span><br><span class="line">  m_server-&gt;<span class="built_in">listen</span>(QHostAddress::Any, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过信号接收客户端请求</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(m_server, &amp;QTcpServer::newConnection, </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>, &amp;TCPServer::slotNewConnection);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">TCPServer::~<span class="built_in">TCPServer</span>()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ui;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TCPServer::slotNewConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(m_client == <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//处理客户端的连接请求</span></span><br><span class="line"></span><br><span class="line">​    m_client = m_server-&gt;<span class="built_in">nextPendingConnection</span>();</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//发送数据</span></span><br><span class="line"></span><br><span class="line">​    m_client-&gt;<span class="built_in">write</span>(<span class="string">&quot;服务器连接成功!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//连接信号, 接收客户端数据</span></span><br><span class="line"></span><br><span class="line">​    <span class="built_in">connect</span>(m_client, &amp;QTcpSocket::readyRead, </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>, &amp;TCPServer::slotReadyRead);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TCPServer::slotReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//接收数据</span></span><br><span class="line"></span><br><span class="line">  QByteArray array = m_client-&gt;<span class="built_in">readAll</span>();</span><br><span class="line"></span><br><span class="line">  QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Client Message&quot;</span>, array);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">客户端通过使用Qt提供的QTcpSocket类可以方便的实现与服务器端的通信。</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------- tcpclient.h ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCPClient</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">explicit</span> <span class="title">TCPClient</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">TCPClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">slotReadyRead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">slotSendMsg</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  Ui::TCPClient *ui;</span><br><span class="line"></span><br><span class="line">  QTcpSocket* m_client;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------- tcpclient.cpp --------------</span></span><br><span class="line"></span><br><span class="line">TCPClient::<span class="built_in">TCPClient</span>(QWidget *parent) :</span><br><span class="line"></span><br><span class="line">  <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::TCPClient)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建套接字</span></span><br><span class="line"></span><br><span class="line">  m_client = <span class="keyword">new</span> <span class="built_in">QTcpSocket</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//连接服务器</span></span><br><span class="line"></span><br><span class="line">  m_client-&gt;<span class="built_in">connectToHost</span>(<span class="built_in">QHostAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过信号接收服务器数据</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(m_client, &amp;QTcpSocket::readyRead, </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>, &amp;TCPClient::slotReadyRead);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送按钮</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(ui-&gt;btnSend, &amp;QPushButton::clicked, </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>, &amp;TCPClient::slotSendMsg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TCPClient::~<span class="built_in">TCPClient</span>()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ui;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TCPClient::slotReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//接收数据</span></span><br><span class="line"></span><br><span class="line">  QByteArray array = m_client-&gt;<span class="built_in">readAll</span>();</span><br><span class="line"></span><br><span class="line">  QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Server Message&quot;</span>, array);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TCPClient::slotSendMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QString text = ui-&gt;textEdit-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送数据</span></span><br><span class="line"></span><br><span class="line">  m_client-&gt;<span class="built_in">write</span>(text.<span class="built_in">toUtf8</span>());</span><br><span class="line"></span><br><span class="line">  ui-&gt;textEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-2-UDP"><a href="#8-2-UDP" class="headerlink" title="8.2 UDP"></a>8.2 UDP</h2><p>使用Qt提供的QUdpSocket进行UDP通信。<strong>在UDP方式下，客户端并不与服务器建立连接，它只负责调用发送函数向服务器发送数据</strong>。类似的<strong>服务器也不从客户端接收连接，只负责调用接收函数，等待来自客户端的数据的到达</strong>。</p>
<p>在UDP通信中，服务器端和客户端的概念已经显得有些淡化，两部分做的工作都大致相同：</p>
<ul>
<li><p>创建套接字</p>
</li>
<li><p>绑定套接字</p>
</li>
</ul>
<p>在UDP中如果需要<strong>接收数据</strong>则<strong>需要对套接字进行绑定</strong>，只发送数据则不需要对套接字进行绑定。</p>
<p>通过调用bind（）函数将套接字绑定到指定端口上。</p>
<ul>
<li><p>接收或者发送数据</p>
</li>
<li><p>接收数据：使用readDatagram()接收数据,函数声明如下:</p>
</li>
</ul>
<p>​		qint64 readDatagram(char * data, qint64 maxSize, </p>
<p>​		QHostAddress * address &#x3D; 0, quint16 * port &#x3D; 0)</p>
<ul>
<li>参数:</li>
</ul>
<p>​	data: 接收数据的缓存地址</p>
<p>​	maxSize: 缓存接收的最大字节数</p>
<p>​	address: 数据发送方的地址（一般使用提供的默认值）</p>
<p>​	port: 数据发送方的端口号（一般使用提供的默认值）</p>
<p>使用<strong>pendingDatagramSize()可以获取到将要接收的数据的大小</strong>，根据该函数返回值来准备对应大小的内存空间存放将要接收的数据。</p>
<ul>
<li>发送数据: 使用writeDatagram()函数发送数据，函数声明如下：</li>
</ul>
<p>​		qint64 writeDatagram(const QByteArray &amp; datagram, </p>
<p>​		const QHostAddress &amp; host, quint16 port)</p>
<ul>
<li>参数：</li>
</ul>
<p>​		datagram：要发送的字符串</p>
<p>​		host：数据接收方的地址</p>
<p>​		port：数据接收方的端口号</p>
<h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p>在使用QUdpSocket类的writeDatagram()函数发送数据的时候，其中第二个参数host应该指定为广播地址：QHostAddress：：Broadcast此设置相当于QHostAddress(“255.255.255.255”)</p>
<p>使用UDP广播的的特点：</p>
<ul>
<li><p>使用UDP进行广播，局域网内的其他的UDP用户全部可以收到广播的消息</p>
</li>
<li><p>UDP广播只能在局域网范围内使用</p>
</li>
</ul>
<h3 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h3><p>我们再使用广播发送消息的时候会发送给所有用户，但是有些用户是不想接受消息的，这时候我们就应该使用组播，接收方只有先注册到组播地址中才能收到组播消息，否则则接受不到消息。另外组播是可以在Internet中使用的。</p>
<p>在使用QUdpSocket类的writeDatagram()函数发送数据的时候，其中第二个参数host应该指定为组播地址，关于组播地址的分类：</p>
<ul>
<li><p>224.0.0.0～224.0.0.255为预留的组播地址（永久组地址），地址224.0.0.0保留不做分配，其它地址供路由协议使用；</p>
</li>
<li><p>224.0.1.0～224.0.1.255是公用组播地址，可以用于Internet；</p>
</li>
<li><p>224.0.2.0～238.255.255.255为用户可用的组播地址（临时组地址），全网范围内有效；</p>
</li>
<li><p>239.0.0.0～239.255.255.255为本地管理组播地址，仅在特定的本地范围内有效。</p>
</li>
</ul>
<p>注册加入到组播地址需要使用QUdpSocket类的成员函数：</p>
<p>bool  joinMulticastGroup(const QHostAddress &amp; groupAddress)</p>
<h2 id="8-3-TCP-x2F-IP-和-UDP的区别"><a href="#8-3-TCP-x2F-IP-和-UDP的区别" class="headerlink" title="8.3 TCP&#x2F;IP 和 UDP的区别"></a>8.3 TCP&#x2F;IP 和 UDP的区别</h2><table>
<thead>
<tr>
<th></th>
<th><strong>TCP&#x2F;IP</strong></th>
<th><strong>UDP</strong></th>
</tr>
</thead>
<tbody><tr>
<td>是否连接</td>
<td>面向连接</td>
<td>无连接</td>
</tr>
<tr>
<td>传输方式</td>
<td>基于流</td>
<td>基于数据报</td>
</tr>
<tr>
<td>传输可靠性</td>
<td>可靠</td>
<td>不可靠</td>
</tr>
<tr>
<td>传输效率</td>
<td>效率低</td>
<td>效率高</td>
</tr>
<tr>
<td>能否广播</td>
<td>不能</td>
<td>能</td>
</tr>
</tbody></table>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>7、文件系统</title>
    <url>/archives/6181735.html</url>
    <content><![CDATA[<p>文件操作是应用程序必不可少的部分。Qt 作为一个通用开发库，提供了跨平台的文件操作能力。Qt 通过QIODevice提供了对 I&#x2F;O 设备的抽象，这些设备具有读写字节块的能力。下面是 I&#x2F;O 设备的类图（Qt5）：</p>
 <span id="more"></span>
<p><img src="/photos/image030.png" alt="Qt"></p>
<ul>
<li><p>QIODevice：所有 I&#x2F;O 设备类的父类，提供了字节块读写的通用操作以及基本接口；</p>
</li>
<li><p>QFileDevice：Qt5新增加的类，提供了有关文件操作的通用实现。</p>
</li>
<li><p>QFlie：访问本地文件或者嵌入资源；</p>
</li>
<li><p>QTemporaryFile：创建和访问本地文件系统的临时文件；</p>
</li>
<li><p>QBuffer：读写QbyteArray, 内存文件；</p>
</li>
<li><p>QProcess：运行外部程序，处理进程间通讯；</p>
</li>
<li><p>QAbstractSocket：所有套接字类的父类；</p>
</li>
<li><p>QTcpSocket：TCP协议网络数据传输；</p>
</li>
<li><p>QUdpSocket：传输 UDP 报文；</p>
</li>
<li><p>QSslSocket：使用 SSL&#x2F;TLS 传输数据；</p>
</li>
</ul>
<p><strong>文件系统分类:</strong></p>
<ul>
<li>顺序访问设备:</li>
</ul>
<p>是指它们的数据只能访问一遍：从头走到尾，从第一个字节开始访问，直到最后一个字节，中途不能返回去读取上一个字节，这其中，QProcess、QTcpSocket、QUdpSoctet和QSslSocket是顺序访问设备。</p>
<ul>
<li>随机访问设备:</li>
</ul>
<p>可以访问任意位置任意次数，还可以使用QIODevice::seek()函数来重新定位文件访问位置指针，QFile、QTemporaryFile和QBuffer是随机访问设备， </p>
<h2 id="7-1-基本文件操作"><a href="#7-1-基本文件操作" class="headerlink" title="7.1 基本文件操作"></a>7.1 基本文件操作</h2><p>文件操作是应用程序必不可少的部分。Qt 作为一个通用开发库，提供了跨平台的文件操作能力。在所有的 I&#x2F;O 设备中，文件 I&#x2F;O 是最重要的部分之一。因为我们大多数的程序依旧需要首先访问本地文件（当然，在云计算大行其道的将来，这一观点可能改变）。<strong>QFile提供了从文件中读取和写入数据的能力。</strong></p>
<p><strong>我们通常会将文件路径作为参数传给QFile的构造函数。不过也可以在创建好对象最后，使用setFileName()来修改</strong>。QFile需要使用 &#x2F; 作为文件分隔符，不过，它会自动将其转换成操作系统所需要的形式。例如 C:&#x2F;windows 这样的路径在 Windows 平台下同样是可以的。</p>
<p>QFile主要提供了有关文件的各种操作，比如打开文件、关闭文件、刷新文件等。<strong>我们可以使用QDataStream或QTextStream类来读写文件，也可以使用QIODevice类提供的read()、readLine()、readAll()以及write()这样的函数。</strong>值得注意的是，<strong>有关文件本身的信息，比如文件名、文件所在目录的名字等，则是通过QFileInfo获取</strong>，而不是自己分析文件路径字符串。</p>
<p>下面我们使用一段代码来看看QFile的有关操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;in.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QIODevice::ReadOnly | QIODevice::Text)) &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Openfile failed.&quot;</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">while</span> (!file.<span class="built_in">atEnd</span>()) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">qDebug</span>() &lt;&lt; file.<span class="built_in">readLine</span>();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function">QFileInfo <span class="title">info</span><span class="params">(file)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; info.<span class="built_in">isDir</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; info.<span class="built_in">isExecutable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; info.<span class="built_in">baseName</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; info.<span class="built_in">completeBaseName</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; info.<span class="built_in">suffix</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; info.<span class="built_in">completeSuffix</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>我们首先使用QFile创建了一个文件对象。</li>
</ul>
<p>这个文件名字是 in.txt。如果你不知道应该把它放在哪里，可以使用QDir::currentPath()来获得应用程序执行时的当前路径。只要将这个文件放在与当前路径一致的目录下即可。</p>
<ul>
<li>使用open()函数打开这个文件，打开形式是只读方式，文本格式。</li>
</ul>
<p>这个类似于fopen()的 r 这样的参数。open()函数返回一个 boo- 类型，如果打开失败，我们在控制台输出一段提示然后程序退出。否则，我们利用 while 循环，将每一行读到的内容输出。</p>
<ul>
<li>可以使用QFileInfo获取有关该文件的信息。</li>
</ul>
<p>QFileInfo有很多类型的函数，我们只举出一些例子。比如：</p>
<ul>
<li><p>isDir()检查该文件是否是目录；</p>
</li>
<li><p>isExecutable()  检查该文件是否是可执行文件等。</p>
</li>
<li><p>baseName()  可以直接获得文件名；</p>
</li>
<li><p>completeBaseName()  获取完整的文件名</p>
</li>
<li><p>suffix()  则直接获取文件后缀名。</p>
</li>
<li><p>completeSuffix()  获取完整的文件后缀</p>
</li>
</ul>
<p>我们可以由下面的示例看到，baseName()和completeBaseName()，以及suffix()和completeSuffix()的区别：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QFileInfo <span class="title">fi</span><span class="params">(<span class="string">&quot;/tmp/archive.tar.gz&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">QString base = fi.<span class="built_in">baseName</span>(); <span class="comment">// base = &quot;archive&quot;</span></span><br><span class="line"></span><br><span class="line">QString base = fi.<span class="built_in">completeBaseName</span>(); <span class="comment">// base = &quot;archive.tar&quot;</span></span><br><span class="line"></span><br><span class="line">QString ext  = fi.<span class="built_in">suffix</span>(); <span class="comment">// ext = &quot;gz&quot;</span></span><br><span class="line"></span><br><span class="line">QString ext  = fi.<span class="built_in">completeSuffix</span>(); <span class="comment">// ext = &quot;tar.gz&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="7-2-二进制文件读写"><a href="#7-2-二进制文件读写" class="headerlink" title="7.2 二进制文件读写"></a>7.2 二进制文件读写</h2><p><strong>QDataStream</strong>提供了基于QIODevice的二进制数据的序列化。数据流是一种二进制流，这种流<strong>完全不依赖</strong>于底层操作系统、CPU 或者字节顺序（大端或小端）。例如，在安装了 Windows 平台的 PC 上面写入的一个数据流，可以不经过任何处理，直接拿到运行了 Solaris 的 SPARC 机器上读取。由于数据流就是二进制流，因此我们也可以<strong>直接读写没有编码的二进制数据，例如图像、视频、音频</strong>等。</p>
<p><strong>QDataStream</strong>既能够存取 C++ 基本类型，如 int、char、short 等，也可以存取复杂的数据类型，例如自定义的类。实际上，QDataStream对于类的存储，是将复杂的类分割为很多基本单元实现的。</p>
<p>结合QIODevice，QDataStream可以很方便地对文件、网络套接字等进行读写操作。我们从代码开始看起：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;file.dat&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">file.<span class="built_in">open</span>(QIODevice::WriteOnly);</span><br><span class="line"></span><br><span class="line"><span class="function">QDataStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">out &lt;&lt; <span class="built_in">QString</span>(<span class="string">&quot;the answer is&quot;</span>);</span><br><span class="line"></span><br><span class="line">out &lt;&lt; (qint32)<span class="number">42</span>;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>在这段代码中，我们首先打开一个名为 file.dat 的文件（注意，我们为简单起见，并没有检查文件打开是否成功，这在正式程序中是不允许的）。然后，我们将刚刚创建的file对象的指针传递给一个QDataStream实例out。类似于std::cout标准输出流，QDataStream也重载了输出重定向&lt;&lt;运算符。后面的代码就很简单了：将“the answer is”和数字 42 输出到数据流。由于我们的 out 对象建立在file之上，因此相当于将问题和答案写入file。</p>
</li>
<li><p>需要指出一点：最好使用 Qt 整型来进行读写，比如程序中的qint32。这保证了在任意平台和任意编译器都能够有相同的行为。</p>
</li>
</ul>
<p>如果你直接运行这段代码，你会得到一个空白的 file.dat，并没有写入任何数据。这是因为我们的file没有正常关闭。<strong>为性能起见，数据只有在文件关闭时才会真正写入</strong>。因此，我们必须在最后添加一行代码：</p>
<p>file.close(); &#x2F;&#x2F; 如果不想关闭文件，可以使用 file.flush();</p>
<p>接下来我们将存储到文件中的答案取出来</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;file.dat&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">file.<span class="built_in">open</span>(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line"><span class="function">QDataStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">QString str;</span><br><span class="line"></span><br><span class="line">qint32 a;</span><br><span class="line"></span><br><span class="line">in &gt;&gt; str &gt;&gt; a;</span><br></pre></td></tr></table></figure>



<p><strong>唯一需要注意的是，你必须按照写入的顺序，将数据读取出来。顺序颠倒的话，程序行为是不确定的，严重时会直接造成程序崩溃。</strong></p>
<p>那么，既然<strong>QIODevice</strong>提供了read()、readLine()之类的函数，为什么还要有QDataStream呢？QDataStream同QIODevice有什么区别？区别在于，<strong>QDataStream</strong>提供流的形式，性能上一般比直接调用原始 API 更好一些。我们通过下面一段代码看看什么是流的形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;file.dat&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">file.<span class="built_in">open</span>(QIODevice::ReadWrite);</span><br><span class="line"></span><br><span class="line"><span class="function">QDataStream <span class="title">stream</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">QString str = <span class="string">&quot;the answer is 42&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">stream &lt;&lt; str;</span><br></pre></td></tr></table></figure>



<h2 id="7-3-文本文件读写"><a href="#7-3-文本文件读写" class="headerlink" title="7.3 文本文件读写"></a>7.3 文本文件读写</h2><p>上一节我们介绍了有关二进制文件的读写。二进制文件比较小巧，却不是人可读的格式。而文本文件是一种人可读的文件。为了操作这种文件，我们需要使用QTextStream类。QTextStream和QDataStream的使用类似，只不过它是操作纯文本文件的。</p>
<p>QTextStream会自动将 Unicode 编码同操作系统的编码进行转换，这一操作对开发人员是透明的。它也会将换行符进行转换，同样不需要自己处理。<strong>QTextStream****使用 16 位的QChar作为基础的数据存储单位，同样，它也支持 C++ 标准类型，如 int 等。实际上，这是将这种标准类型与字符串进行了相互转换。</strong></p>
<p>QTextStream同QDataStream的使用基本一致，例如下面的代码将把“The answer is 42”写入到 file.txt 文件中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">data</span><span class="params">(<span class="string">&quot;file.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data.<span class="built_in">open</span>(QFile::WriteOnly | QIODevice::Truncate)) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; <span class="string">&quot;The answer is &quot;</span> &lt;&lt; <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里，我们在open()函数中增加了QIODevice::Truncate打开方式。我们可以从下表中看到这些打开方式的区别：</p>
<p>枚举值         描述</p>
<ul>
<li><p>QIODevice::NotOpen   未打开</p>
</li>
<li><p>QIODevice::ReadOnly   以只读方式打开</p>
</li>
<li><p>QIODevice::WriteOnly   以只写方式打开</p>
</li>
<li><p>QIODevice::ReadWrite   以读写方式打开</p>
</li>
<li><p>QIODevice::Append     以追加的方式打开，</p>
</li>
</ul>
<p>新增加的内容将被追加到文件末尾</p>
<ul>
<li>QIODevice::Truncate   以重写的方式打开，在写入新的数据时会将原有</li>
</ul>
<p>​             数据全部清除，游标设置在文件开头。</p>
<ul>
<li>QIODevice::Text      在读取时，将行结束符转换成 &#x2F;n；在写入时，</li>
</ul>
<p>将行结束符转换成本地格式，例如 Win32 平台</p>
<p>上是 &#x2F;r&#x2F;n</p>
<ul>
<li>QIODevice::Unbuffered  忽略缓存</li>
</ul>
<p>我们在这里使用了QFile::WriteOnly | QIODevice::Truncate，也就是以只写并且覆盖已有内容的形式操作文件。注意，QIODevice::Truncate会直接将文件内容清空。</p>
<p>虽然QTextStream的写入内容与QDataStream一致，但是读取时却会有些困难：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">data</span><span class="params">(<span class="string">&quot;file.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data.<span class="built_in">open</span>(QFile::ReadOnly)) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString str;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  in&gt;&gt; str &gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在使用QDataStream的时候，这样的代码很方便，但是使用了QTextStream时却有所不同：读出的时候，str 里面将是 The answer is 42，ans 是 0。这是因为<strong>当使用QDataStream写入的时候，实际上会在要写入的内容前面，额外添加一个这段内容的长度值。而以文本形式写入数据，是没有数据之间的分隔的。</strong>因此，使用文本文件时，很少会将其分割开来读取，而是使用诸如使用：</p>
<ul>
<li><p>QTextStream::readLine() 读取一行</p>
</li>
<li><p>QTextStream::readAll()读取所有文本</p>
</li>
</ul>
<p>这种函数之后再对获得的QString对象进行处理。</p>
<p>默认情况下，QTextStream的编码格式是 Unicode，如果我们需要使用另外的编码，可以使用：</p>
<p>stream.setCodec(“UTF-8”);</p>
<p>这样的函数进行设置。</p>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>6、绘图和绘图设备</title>
    <url>/archives/6171531.html</url>
    <content><![CDATA[<h2 id="6-1-QPainter"><a href="#6-1-QPainter" class="headerlink" title="6.1 QPainter"></a>6.1 QPainter</h2><p>Qt 的绘图系统允许使用相同的 API 在屏幕和其它打印设备上进行绘制。整个绘图系统基于QPainter，QPainterDevice和QPaintEngine三个类。</p>
<p><strong>QPainter</strong>用来执行绘制的操作；<strong>QPaintDevice</strong>是一个二维空间的抽象，这个二维空间允许QPainter在其上面进行绘制，也就是QPainter工作的空间；<strong>QPaintEngine</strong>提供了画笔（QPainter）在不同的设备上进行绘制的统一的接口。QPaintEngine类应用于QPainter和QPaintDevice之间，通常对开发人员是透明的。除非你需要自定义一个设备，否则你是不需要关心QPaintEngine这个类的。我们可以把QPainter理解成画笔；把QPaintDevice理解成使用画笔的地方，比如纸张、屏幕等；而对于纸张、屏幕而言，肯定要使用不同的画笔绘制，为了统一使用一种画笔，我们设计了QPaintEngine类，这个类让不同的纸张、屏幕都能使用一种画笔。</p>
 <span id="more"></span>
<p>下图给出了这三个类之间的层次结构:</p>
<p><img src="/photos/image027.png" alt="Qt"></p>
<p>上面的示意图告诉我们，<strong>Qt 的绘图系统实际上是，使用QPainter在QPainterDevice上进行绘制，它们之间使用QPaintEngine进行通讯（也就是翻译QPainter的指令）。</strong></p>
<p>下面我们通过一个实例来介绍QPainter的使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PaintedWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">PaintedWidget</span>(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意我们重写了QWidget的paintEvent()函数。接下来就是PaintedWidget的源代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">PaintedWidget::<span class="built_in">PaintedWidget</span>(QWidget *parent) :</span><br><span class="line"></span><br><span class="line">  <span class="built_in">QWidget</span>(parent)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">resize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;Paint Demo&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PaintedWidget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawLine</span>(<span class="number">80</span>, <span class="number">100</span>, <span class="number">650</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">setPen</span>(Qt::red);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::green, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">setBrush</span>(Qt::blue);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawEllipse</span>(<span class="number">50</span>, <span class="number">150</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在构造函数中，我们仅仅设置了窗口的大小和标题。而paintEvent()函数则是绘制的代码。首先，我们在栈上创建了一个QPainter对象，也就是说，每次运行paintEvent()函数的时候，都会重建这个QPainter对象。注意，这一点可能会引发某些细节问题：由于我们每次重建QPainter，因此第一次运行时所设置的画笔颜色、状态等，第二次再进入这个函数时就会全部丢失。有时候我们希望保存画笔状态，就必须自己保存数据，否则的话则需要将QPainter作为类的成员变量。</p>
<p>QPainter接收一个QPaintDevice指针作为参数。QPaintDevice有很多子类，比如QImage，以及QWidget。注意回忆一下，QPaintDevice可以理解成要在哪里去绘制，而现在我们希望画在这个组件，因此传入的是 this 指针。</p>
<p>QPainter有很多以 draw 开头的函数，用于各种图形的绘制，比如这里的drawLine()，drawRect()以及drawEllipse()等。当绘制轮廓线时，使用QPainter的pen()属性。比如，我们调用了painter.setPen(Qt::red)将 pen设置为红色，则下面绘制的矩形具有红色的轮廓线。接下来，我们将 pen修改为绿色，5 像素宽（painter.setPen(QPen(Qt::green, 5))），又设置了画刷为蓝色。这时候再调用 draw 函数，则是具有绿色 5 像素宽轮廓线、蓝色填充的椭圆。</p>
<h2 id="6-2-绘图设备"><a href="#6-2-绘图设备" class="headerlink" title="6.2 绘图设备"></a>6.2 绘图设备</h2><p><strong>绘图设备是指继承QPainterDevice的子类。</strong>Qt一共提供了四个这样的类，分别是QPixmap、QBitmap、QImage和 QPicture。其中，</p>
<ul>
<li><p>QPixmap专门为图像在屏幕上的显示做了优化</p>
</li>
<li><p>QBitmap是QPixmap的一个子类，它的色深限定为1，可以使用 QPixmap的isQBitmap()函数来确定这个QPixmap是不是一个QBitmap。</p>
</li>
<li><p>QImage专门为图像的像素级访问做了优化。 </p>
</li>
<li><p>QPicture则可以记录和重现QPainter的各条命令。</p>
</li>
</ul>
<h3 id="6-2-1-QPixmap、QBitmap、QImage"><a href="#6-2-1-QPixmap、QBitmap、QImage" class="headerlink" title="6.2.1 QPixmap、QBitmap、QImage"></a>6.2.1 QPixmap、QBitmap、QImage</h3><p>QPixmap继承了QPaintDevice，因此，你可以使用QPainter直接在上面绘制图形。QPixmap也可以接受一个字符串作为一个文件的路径来显示这个文件，比如你想在程序之中打开png、jpeg之类的文件，就可以使用 QPixmap。使用QPainter的drawPixmap()函数可以把这个文件绘制到一个QLabel、QPushButton或者其他的设备上面。<strong>QPixmap是针对屏幕进行特殊优化的，因此，它与实际的底层显示设备息息相关。</strong>注意，这里说的显示设备并不是硬件，而是操作系统提供的原生的绘图引擎。所以，在不同的操作系统平台下，QPixmap的显示可能会有所差别。</p>
<p><strong>QBitmap</strong>继承自QPixmap，因此具有QPixmap的所有特性，提供单色图像<strong>。QBitmap的色深始终为1. 色深这个概念来自计算机图形学，是指用于表现颜色的二进制的位数。我们知道，计算机里面的数据都是使用二进制表示的。为了表示一种颜色，我们也会使用二进制。比如我们要表示8种颜色，需要用3个二进制位，这时我们就说色深是3. 因此，所谓色深为1，也就是使用1个二进制位表示颜色。1个位只有两种状态：0和1，因此它所表示的颜色就有两种，黑和白。所以说，</strong>QBitmap实际上是只有黑白两色的图像数据。</p>
<p><strong>由于QBitmap色深小，因此只占用很少的存储空间，所以适合做光标文件和笔刷。</strong></p>
<p>下面我们来看同一个图像文件在QPixmap和QBitmap下的不同表现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PaintWidget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPixmap <span class="title">pixmap</span><span class="params">(<span class="string">&quot;:/Image/butterfly.png&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPixmap <span class="title">pixmap1</span><span class="params">(<span class="string">&quot;:/Image/butterfly1.png&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QBitmap <span class="title">bitmap</span><span class="params">(<span class="string">&quot;:/Image/butterfly.png&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QBitmap <span class="title">bitmap1</span><span class="params">(<span class="string">&quot;:/Image/butterfly1.png&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">0</span>, pixmap);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawPixmap</span>(<span class="number">200</span>, <span class="number">0</span>, pixmap1);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">130</span>, bitmap);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawPixmap</span>(<span class="number">200</span>, <span class="number">130</span>, bitmap1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/photos/image028.png" alt="Qt"></p>
<p>这里我们给出了两张png图片。butterfly1.png是没有透明色的纯白背景，而butterfly.png是具有透明色的背景。我们分别使用QPixmap和QBitmap来加载它们。注意看它们的区别：白色的背景在QBitmap中消失了，而透明色在QBitmap中转换成了黑色；其他颜色则是使用点的疏密程度来体现的。</p>
<p>QPixmap使用底层平台的绘制系统进行绘制，无法提供像素级别的操作，而<strong>QImage则是使用独立于硬件的绘制系统，实际上是自己绘制自己，因此提供了像素级别的操作，并且能够在不同系统之上提供一个一致的显示形式。</strong></p>
<p>我们声明了一个QImage对象，大小是300 x 300，颜色模式是RGB32，即使用32位数值表示一个颜色的RGB值，也就是说每种颜色使用8位。然后我们对每个像素进行颜色赋值，从而构成了这个图像。我们可以把QImage想象成一个RGB颜色的二维数组，记录了每一像素的颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PaintWidget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QImage <span class="title">image</span><span class="params">(<span class="number">300</span>, <span class="number">300</span>, QImage::Format_RGB32)</span></span>;</span><br><span class="line"></span><br><span class="line">  QRgb value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将图片背景填充为白色</span></span><br><span class="line"></span><br><span class="line">  image.<span class="built_in">fill</span>(Qt::white);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//改变指定区域的像素点的值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">50</span>; i&lt;<span class="number">100</span>; ++i)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">50</span>; j&lt;<span class="number">100</span>; ++j)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​      value = <span class="built_in">qRgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 红色</span></span><br><span class="line"></span><br><span class="line">​      image.<span class="built_in">setPixel</span>(i, j, value);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将图片绘制到窗口中</span></span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawImage</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), image);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/photos/image029.png" alt="Qt"></p>
<p>QImage与QPixmap的区别</p>
<ul>
<li><p>QPixmap主要是用于绘图，针对屏幕显示而最佳化设计，QImage主要是为图像I&#x2F;O、图片访问和像素修改而设计的</p>
</li>
<li><p>QPixmap依赖于所在的平台的绘图引擎，故例如反锯齿等一些效果在不同的平台上可能会有不同的显示效果，QImage使用Qt自身的绘图引擎，可在不同平台上具有相同的显示效果</p>
</li>
<li><p>由于QImage是独立于硬件的，也是一种QPaintDevice，因此我们可以在另一个线程中对其进行绘制，而不需要在GUI线程中处理，使用这一方式可以很大幅度提高UI响应速度。</p>
</li>
<li><p>QImage可通过setPixpel()和pixel()等方法直接存取指定的像素。</p>
</li>
</ul>
<p>QImage与QPixmap之间的转换:</p>
<ul>
<li>QImage转QPixmap</li>
</ul>
<p>​		使用QPixmap的静态成员函数: fromImage()</p>
<p>​		QPixmap  fromImage(const QImage &amp; image, </p>
<p>​		Qt::ImageConversionFlags flags &#x3D; Qt::AutoColor)</p>
<ul>
<li>QPixmap转QImage:</li>
</ul>
<p>​		使用QPixmap类的成员函数: toImage()</p>
<p>​		QImage toImage() const</p>
<h3 id="6-2-2-QPicture"><a href="#6-2-2-QPicture" class="headerlink" title="6.2.2 QPicture"></a>6.2.2 QPicture</h3><p>最后一个需要说明的是QPicture。<strong>这是一个可以记录和重现QPainter命令的绘图设备。</strong> <strong>QPicture将QPainter的命令序列化到一个IO设备，保存为一个平台独立的文件格式。</strong>这种格式有时候会是“元文件(metan files)”。Qt的这种格式是二进制的，不同于某些本地的元文件，Qt的pictures文件没有内容上的限制，只要是能够被QPainter绘制的元素，不论是字体还是pixmap，或者是变换，都可以保存进一个picture中。</p>
<p><strong>QPicture****是平台无关的</strong>，因此它可以使用在多种设备之上，比如svg、pdf、ps、打印机或者屏幕。回忆下我们这里所说的QPaintDevice，实际上是说可以有QPainter绘制的对象。QPicture使用系统的分辨率，并且可以调整 QPainter来消除不同设备之间的显示差异。</p>
<p>如果我们要记录下QPainter的命令，首先要使用QPainter::begin()函数，将QPicture实例作为参数传递进去，以便告诉系统开始记录，记录完毕后使用QPainter::end()命令终止。代码示例如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PaintWidget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QPicture pic;</span><br><span class="line"></span><br><span class="line">  QPainter painter;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将图像绘制到QPicture中,并保存到文件</span></span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">begin</span>(&amp;pic);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawEllipse</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">fillRect</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, Qt::red);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">  pic.<span class="built_in">save</span>(<span class="string">&quot;D://drawing.pic&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//将保存的绘图动作重新绘制到设备上</span></span><br><span class="line"></span><br><span class="line">  pic.<span class="built_in">load</span>(<span class="string">&quot;D://drawing.pic&quot;</span>);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">begin</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">drawPicture</span>(<span class="number">200</span>, <span class="number">200</span>, pic);</span><br><span class="line"></span><br><span class="line">  painter.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>5、Qt消息机制和事件</title>
    <url>/archives/61270931.html</url>
    <content><![CDATA[<h2 id="5-1-事件"><a href="#5-1-事件" class="headerlink" title="5.1 事件"></a>5.1 事件</h2><p>事件（event）是由系统或者 Qt 本身在不同的时刻发出的。当用户按下鼠标、敲下键盘，或者是窗口需要重新绘制的时候，都会发出一个相应的事件。一些事件在对用户操作做出响应时发出，如键盘事件等；另一些事件则是由系统自动发出，如计时器事件。</p>
<p>在前面我们也曾经简单提到，<strong>Qt 程序</strong>需要在main()函数创建一个QApplication对象，然后调用它的exec()函数。这个函数就是开始 Qt 的事件循环。在执行exec()函数之后，程序将进入事件循环来监听应用程序的事件。当事件发生时，Qt 将创建一个事件对象。<strong>Qt 中所有事件类都继承于QEvent</strong>。在事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。<strong>event()函数并不直接处理事件，而是按照事件对象的类型分派给特定的事件处理函数</strong>（event handler），关于这一点，会在后边详细说明。</p>
<p>在所有组件的父类QWidget中，定义了很多事件处理的回调函数，如<br> <span id="more"></span></p>
<ul>
<li><p>keyPressEvent()</p>
</li>
<li><p>keyReleaseEvent()</p>
</li>
<li><p>mouseDoubleClickEvent()</p>
</li>
<li><p>mouseMoveEvent()</p>
</li>
<li><p>mousePressEvent()</p>
</li>
<li><p>mouseReleaseEvent() 等。</p>
</li>
</ul>
<p>这些函数都是 protected virtual 的，也就是说，我们可以在子类中重新实现这些函数。下面来看一个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventLabel</span> : <span class="keyword">public</span> QLabel</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Move: (%1, %2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/h1&gt;&lt;/center&gt;&quot;</span>).<span class="built_in">arg</span>(QString::<span class="built_in">number</span>(event-&gt;<span class="built_in">x</span>()),</span><br><span class="line"></span><br><span class="line">​      QString::<span class="built_in">number</span>(event-&gt;<span class="built_in">y</span>())));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLabel::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Press:(%1, %2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/h1&gt;&lt;/center&gt;&quot;</span>).<span class="built_in">arg</span>(QString::<span class="built_in">number</span>(event-&gt;<span class="built_in">x</span>()),</span><br><span class="line"></span><br><span class="line">​        QString::<span class="built_in">number</span>(event-&gt;<span class="built_in">y</span>())));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QString msg;</span><br><span class="line"></span><br><span class="line">  msg.<span class="built_in">sprintf</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Release: (%d, %d)&lt;/h1&gt;&lt;/center&gt;&quot;</span>,</span><br><span class="line"></span><br><span class="line">​        event-&gt;<span class="built_in">x</span>(), event-&gt;<span class="built_in">y</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>-&gt;<span class="built_in">setText</span>(msg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  EventLabel *label = <span class="keyword">new</span> EventLabel;</span><br><span class="line"></span><br><span class="line">  label-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;MouseEvent Demo&quot;</span>);</span><br><span class="line"></span><br><span class="line">  label-&gt;<span class="built_in">resize</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  label-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>EventLabel继承了QLabel，覆盖了mousePressEvent()、mouseMoveEvent()和MouseReleaseEvent()三个函数。我们并没有添加什么功能，只是在鼠标按下（press）、鼠标移动（move）和鼠标释放（release）的时候，把当前鼠标的坐标值显示在这个Label上面。由于QLabel是支持 HTML 代码的，因此我们直接使用了 HTML 代码来格式化文字。</p>
</li>
<li><p>QString的arg()函数可以自动替换掉QString中出现的占位符。其占位符以 % 开始，后面是占位符的位置，例如 %1，%2 这种。</p>
</li>
</ul>
<p>QString(“[%1, %2]”).arg(x).arg(y);</p>
<p>语句将会使用x替换 %1，y替换 %2，因此，生成的QString为[x, y]。</p>
<ul>
<li>在mouseReleaseEvent()函数中，我们使用了另外一种QString的构造方法。我们使用类似 C 风格的格式化函数sprintf()来构造QString。</li>
</ul>
<p>运行上面的代码，当我们点击了一下鼠标之后，label 上将显示鼠标当前坐标值。</p>
<p>​                               <img src="/photos/image025.png" alt="Qt"></p>
<p>为什么要点击鼠标之后才能在mouseMoveEvent()函数中显示鼠标坐标值？</p>
<p><strong>这是因为QWidget中有一个mouseTracking属性，该属性用于设置是否追踪鼠标。只有鼠标被追踪时，mouseMoveEvent()才会发出。如果mouseTracking是 false（默认即是），组件在至少一次鼠标点击之后，才能够被追踪，也就是能够发出mouseMoveEvent()事件。如果mouseTracking为 true，则mouseMoveEvent()直接可以被发出。</strong></p>
<p>知道了这一点，我们就可以在main()函数中添加如下代码：</p>
<p>label-&gt;setMouseTracking(true);</p>
<p>在运行程序就没有这个问题了。    </p>
<h2 id="5-2-event（）"><a href="#5-2-event（）" class="headerlink" title="5.2 event（）"></a>5.2 event（）</h2><p>事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是将这些事件对象按照它们不同的类型，分发给不同的事件处理器（event handler）。</p>
<p>如上所述，<strong>event()函数主要用于事件的分发</strong>。所以，如果你希望在事件分发之前做一些操作，就可以重写这个event()函数了。例如，我们希望在一个QWidget组件中监听 tab 键的按下，那么就可以继承QWidget，并重写它的event()函数，来达到这个目的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CustomWidget::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::KeyPress) &#123;</span><br><span class="line"></span><br><span class="line">​    QKeyEvent *keyEvent = <span class="built_in">static_cast</span>&lt;QKeyEvent *&gt;(e);<span class="comment">//强制类型转换</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (keyEvent-&gt;<span class="built_in">key</span>() == Qt::Key_Tab) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;You press tab.&quot;</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> QWidget::<span class="built_in">event</span>(e);<span class="comment">//必要的，重新处理其他事件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>CustomWidget是一个普通的QWidget子类。我们重写了它的event()函数，这个函数有一个QEvent对象作为参数，也就是需要转发的事件对象。函数返回值是 bool 类型。</p>
<ul>
<li><p><strong>如果传入的事件已被识别并且处理，则需要返回 true，否则返回 false。如果返回值是 true，那么 Qt 会认为这个事件已经处理完毕，不会再将这个事件发送给其它对象，而是会继续处理事件队列中的下一事件。</strong></p>
</li>
<li><p><strong>在event()函数中，调用事件对象的accept()和ignore()函数是没有作用的，不会影响到事件的传播</strong>。</p>
</li>
</ul>
<p>我们可以通过使用QEvent::type()函数可以检查事件的实际类型，其返回值是QEvent::Type类型的枚举。我们处理过自己感兴趣的事件之后，可以直接返回 true，表示我们已经对此事件进行了处理；对于其它我们不关心的事件，则需要调用父类的event()函数继续转发，否则这个组件就只能处理我们定义的事件了。为了测试这一种情况，我们可以尝试下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CustomTextEdit::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::KeyPress) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    QKeyEvent *keyEvent = <span class="built_in">static_cast</span>&lt;QKeyEvent *&gt;(e);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (keyEvent-&gt;<span class="built_in">key</span>() == Qt::Key_Tab) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;You press tab.&quot;</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>CustomTextEdit是QTextEdit的一个子类。我们重写了其event()函数，却没有调用父类的同名函数。这样，我们的组件就只能处理 Tab 键，再也无法输入任何文本，也不能响应其它事件，比如鼠标点击之后也不会有光标出现。这是因为我们只处理的KeyPress类型的事件，并且如果不是KeyPress事件，则直接返回 false，鼠标事件根本不会被转发，也就没有了鼠标事件。</p>
<p>通过查看QObject::event()的实现，我们可以理解，event()函数同前面的章节中我们所说的事件处理器有什么联系：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//!!! Qt5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QObject::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (e-&gt;<span class="built_in">type</span>()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> QEvent::Timer:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">timerEvent</span>((QTimerEvent*)e);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> QEvent::ChildAdded:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> QEvent::ChildPolished:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> QEvent::ChildRemoved:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">childEvent</span>((QChildEvent*)e);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() &gt;= QEvent::User) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">customEvent</span>(e);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这是 Qt 5 中QObject::event()函数的源代码（Qt 4 的版本也是类似的）。我们可以看到，同前面我们所说的一样，Qt 也是使用QEvent::type()判断事件类型，然后调用了特定的事件处理器。比如，如果event-&gt;type()返回值是QEvent::Timer，则调用timerEvent()函数。可以想象，QWidget::event()中一定会有如下的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (event-&gt;<span class="built_in">type</span>()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> QEvent::MouseMove:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">mouseMoveEvent</span>((QMouseEvent*)event);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>事实也的确如此。timerEvent()和mouseMoveEvent()这样的函数，就是我们前面章节所说的事件处理器 event handler。也就是说，<strong>event()函数中实际是通过事件处理器来响应一个具体的事件。这相当于event()函数将具体事件的处理“委托”给具体的事件处理器。而这些事件处理器是 protected virtual 的，因此，我们重写了某一个事件处理器，即可让 Qt 调用我们自己实现的版本。</strong></p>
<p>由此可以见，event()是一个集中处理不同类型的事件的地方。如果你不想重写一大堆事件处理器，就可以重写这个event()函数，通过QEvent::type()判断不同的事件。鉴于重写event()函数需要十分小心注意父类的同名函数的调用，一不留神就可能出现问题，所以一般还是建议只重写事件处理器（当然，也必须记得是不是应该调用父类的同名处理器）。这其实暗示了event()函数的另外一个作用：屏蔽掉某些不需要的事件处理器。正如我们前面的CustomTextEdit例子看到的那样，我们创建了一个只能响应 tab 键的组件。这种作用是重写事件处理器所不能实现的。</p>
<h2 id="5-3-事件过滤器"><a href="#5-3-事件过滤器" class="headerlink" title="5.3 事件过滤器"></a>5.3 事件过滤器</h2><p>有时候，对象需要查看、甚至要拦截发送到另外对象的事件。例如，对话框可能想要拦截按键事件，不让别的组件接收到；或者要修改回车键的默认处理。</p>
<p>通过前面的章节，我们已经知道，Qt 创建了QEvent事件对象之后，会调用QObject的event()函数处理事件的分发。显然，我们可以在event()函数中实现拦截的操作。由于event()函数是 protected 的，因此，需要继承已有类。如果组件很多，就需要重写很多个event()函数。这当然相当麻烦，更不用说重写event()函数还得小心一堆问题。好在 Qt 提供了另外一种机制来达到这一目的：事件过滤器。</p>
<p> <img src="/photos/image026.png" alt="Qt"></p>
<p>QObject有一个eventFilter()函数，用于建立事件过滤器。函数原型如下：</p>
<p>virtual bool QObject::eventFilter ( QObject * watched, QEvent * event );</p>
<p>这个函数正如其名字显示的那样，是一个“事件过滤器”。所谓事件过滤器，可以理解成一种过滤代码。事件过滤器会检查接收到的事件。如果这个事件是我们感兴趣的类型，就进行我们自己的处理；如果不是，就继续转发。这个函数返回一个 bool 类型，如果你想将参数 event 过滤出来，比如，<strong>不想让它继续转发，就返回 true，否则返回 false。</strong>事件过滤器的调用时间是目标对象（也就是参数里面的watched对象）接收到事件对象之前。也就是说，如果你在事件过滤器中停止了某个事件，那么，watched对象以及以后所有的事件过滤器根本不会知道这么一个事件。</p>
<p>我们来看一段简单的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">   <span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *obj, QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">   QTextEdit *textEdit;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> MainWindow::<span class="built_in">MainWindow</span>()</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">   textEdit = <span class="keyword">new</span> QTextEdit;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">setCentralWidget</span>(textEdit);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">   textEdit-&gt;<span class="built_in">installEventFilter</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">MainWindow::eventFilter</span><span class="params">(QObject *obj, QEvent *event)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (obj == textEdit) &#123;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">if</span> (event-&gt;<span class="built_in">type</span>() == QEvent::KeyPress) &#123;</span><br><span class="line"></span><br><span class="line">​       QKeyEvent *keyEvent = <span class="built_in">static_cast</span>&lt;QKeyEvent *&gt;(event);</span><br><span class="line"></span><br><span class="line">​       <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Ate key press&quot;</span> &lt;&lt; keyEvent-&gt;<span class="built_in">key</span>();</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// pass the event on to the parent class</span></span><br><span class="line"></span><br><span class="line">​     <span class="keyword">return</span> QMainWindow::<span class="built_in">eventFilter</span>(obj, event);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>MainWindow是我们定义的一个类。我们重写了它的eventFilter()函数。为了过滤特定组件上的事件，首先需要判断这个对象是不是我们感兴趣的组件，然后判断这个事件的类型。在上面的代码中，我们不想让textEdit组件处理键盘按下的事件。所以，首先我们找到这个组件，如果这个事件是键盘事件，则直接返回 true，也就是过滤掉了这个事件，其他事件还是要继续处理，所以返回 false。对于其它的组件，我们并不保证是不是还有过滤器，于是最保险的办法是调用父类的函数。</p>
</li>
<li><p>eventFilter()函数相当于创建了过滤器，然后我们需要安装这个过滤器。安装过滤器需要调用QObject::installEventFilter()函数。函数的原型如下：</p>
</li>
</ul>
<p>void QObject::installEventFilter ( QObject * filterObj )</p>
<p>这个函数接受一个QObject *类型的参数。记得刚刚我们说的，eventFilter()函数是QObject的一个成员函数，因此，任意QObject都可以作为事件过滤器（问题在于，如果你没有重写eventFilter()函数，这个事件过滤器是没有任何作用的，因为默认什么都不会过滤）。已经存在的过滤器则可以通过QObject::removeEventFilter()函数移除。</p>
<ul>
<li>我们可以向一个对象上面安装多个事件处理器，只要调用多次installEventFilter()函数。如果一个对象存在多个事件过滤器，那么，最后一个安装的会第一个执行，也就是后进先执行的顺序。</li>
</ul>
<p>还记得我们前面的那个例子吗？我们使用event()函数处理了 Tab 键：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CustomWidget::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::KeyPress) &#123;</span><br><span class="line"></span><br><span class="line">​    QKeyEvent *keyEvent = <span class="built_in">static_cast</span>&lt;QKeyEvent *&gt;(e);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (keyEvent-&gt;<span class="built_in">key</span>() == Qt::Key_Tab) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;You press tab.&quot;</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> QWidget::<span class="built_in">event</span>(e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>现在，我们可以给出一个使用事件过滤器的版本：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FilterObject::eventFilter</span><span class="params">(QObject *object, QEvent *event)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (object == target &amp;&amp; event-&gt;<span class="built_in">type</span>() == QEvent::KeyPress) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    QKeyEvent *keyEvent = <span class="built_in">static_cast</span>&lt;QKeyEvent *&gt;(event);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (keyEvent-&gt;<span class="built_in">key</span>() == Qt::Key_Tab) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;You press tab.&quot;</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>事件过滤器的强大之处在于，我们可以为整个应用程序添加一个事件过滤器。记得，installEventFilter()函数是QObject的函数，QApplication或者QCoreApplication对象都是QObject的子类，因此，我们可以向QApplication或者QCoreApplication添加事件过滤器。<strong>这种全局的事件过滤器将会在所有其它特性对象的事件过滤器之前调用。尽管很强大，但这种行为会严重降低整个应用程序的事件分发效率。</strong>因此，除非是不得不使用的情况，否则的话我们不应该这么做。</p>
<p><strong>注意，</strong></p>
<p><strong>事件过滤器和被安装过滤器的组件必须在同一线程，否则，过滤器将不起作用。另外，如果在安装过滤器之后，这两个组件到了不同的线程，那么，只有等到二者重新回到同一线程的时候过滤器才会有效。</strong></p>
<h2 id="5-4-总结"><a href="#5-4-总结" class="headerlink" title="5.4 总结"></a>5.4 总结</h2><p>Qt 的事件是整个 Qt 框架的核心机制之一，也比较复杂。说它复杂，更多是因为它涉及到的函数众多，而处理方法也很多，有时候让人难以选择。现在我们简单总结一下 Qt 中的事件机制。</p>
<p>Qt 中有很多种事件：鼠标事件、键盘事件、大小改变的事件、位置移动的事件等等。如何处理这些事件，实际有两种选择：</p>
<ul>
<li>所有事件对应一个事件处理函数，在这个事件处理函数中用一个很大的分支语句进行选择，其代表作就是 win32 API（MFC里面的） 的WndProc()函数：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam)</span></span></span><br></pre></td></tr></table></figure>



<p>在这个函数中，我们需要使用switch语句，选择message参数的类型进行处理，典型代码是：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(message)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> WM_PAINT:</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>每一种事件对应一个事件处理函数。Qt 就是使用的这么一种机制：</p>
</li>
<li><p>mouseEvent()</p>
</li>
<li><p>keyPressEvent()</p>
</li>
<li><p>…</p>
</li>
</ul>
<p>Qt 具有这么多种事件处理函数，肯定有一个地方对其进行分发，否则，Qt 怎么知道哪一种事件调用哪一个事件处理函数呢？这个分发的函数，就是event()。显然，当QMouseEvent产生之后，event()函数将其分发给mouseEvent()事件处理器进行处理。</p>
<p>event()函数会有两个问题：</p>
<ul>
<li><p>event()函数是一个 protected 的函数，这意味着我们要想重写event()，必须继承一个已有的类。试想，我的程序根本不想要鼠标事件，程序中所有组件都不允许处理鼠标事件，是不是我得继承所有组件，一一重写其event()函数？protected 函数带来的另外一个问题是，如果我基于第三方库进行开发，而对方没有提供源代码，只有一个链接库，其它都是封装好的。我怎么去继承这种库中的组件呢？</p>
</li>
<li><p>event()函数的确有一定的控制，不过有时候我的需求更严格一些：我希望那些组件根本看不到这种事件。event()函数虽然可以拦截，但其实也是接收到了QMouseEvent对象。我连让它收都收不到。这样做的好处是，模拟一种系统根本没有那个事件的效果，所以其它组件根本不会收到这个事件，也就无需修改自己的事件处理函数。这种需求怎么办呢？</p>
</li>
</ul>
<p>这两个问题是event()函数无法处理的。于是，Qt 提供了另外一种解决方案：事件过滤器。事件过滤器给我们一种能力，让我们能够完全移除某种事件。事件过滤器可以安装到任意QObject类型上面，并且可以安装多个。如果要实现全局的事件过滤器，则可以安装到QApplication或者QCoreApplication上面。这里需要注意的是，如果使用installEventFilter()函数给一个对象安装事件过滤器，那么该事件过滤器只对该对象有效，只有这个对象的事件需要先传递给事件过滤器的eventFilter()函数进行过滤，其它对象不受影响。如果给QApplication对象安装事件过滤器，那么该过滤器对程序中的每一个对象都有效，任何对象的事件都是先传给eventFilter()函数。</p>
<p><strong>事件过滤器可以解决刚刚我们提出的event()函数的两点不足：</strong></p>
<ul>
<li><p><strong>首先，事件过滤器不是 protected 的，因此我们可以向任何QObject子类安装事件过滤器；</strong></p>
</li>
<li><p><strong>其次，事件过滤器在目标对象接收到事件之前进行处理，如果我们将事件过滤掉，目标对象根本不会见到这个事件。</strong></p>
</li>
</ul>
<p>事实上，还有一种方法，我们没有介绍。Qt 事件的调用最终都会追溯到QCoreApplication::notify()函数，因此，最大的控制权实际上是重写QCoreApplication::notify()。这个函数的声明是：</p>
<p>virtual bool QCoreApplication::notify ( QObject * receiver,</p>
<p>​                    QEvent * event );</p>
<p>该函数会将event发送给receiver，也就是调用receiver-&gt;event(event)，其返回值就是来自receiver的事件处理器。注意，这个函数为任意线程的任意对象的任意事件调用，因此，它不存在事件过滤器的线程的问题。不过我们并不推荐这么做，因为notify()函数只有一个，而事件过滤器要灵活得多。</p>
<p><strong>现在我们可以总结一下 Qt 的事件处理，实际上是有五个层次：</strong></p>
<ul>
<li><p>重写paintEvent()、mousePressEvent()等事件处理函数。这是最普通、最简单的形式，同时功能也最简单。</p>
</li>
<li><p>重写event()函数。event()函数是所有对象的事件入口，QObject和QWidget中的实现，默认是把事件传递给特定的事件处理函数。</p>
</li>
<li><p>在特定对象上面安装事件过滤器。该过滤器仅过滤该对象接收到的事件。</p>
</li>
<li><p>在QCoreApplication::instance()上面安装事件过滤器。该过滤器将过滤所有对象的所有事件，因此和notify()函数一样强大，但是它更灵活，因为可以安装多个过滤器。全局的事件过滤器可以看到 disabled 组件上面发出的鼠标事件。全局过滤器有一个问题：只能用在主线程。</p>
</li>
<li><p>重写QCoreApplication::notify()函数。这是最强大的，和全局事件过滤器一样提供完全控制，并且不受线程的限制。但是全局范围内只能有一个被使用（因为QCoreApplication是单例的）。</p>
</li>
</ul>
<h2 id="5-5-不规则窗体"><a href="#5-5-不规则窗体" class="headerlink" title="5.5 不规则窗体"></a>5.5 不规则窗体</h2><p>常见的窗体是各种方形的对话框,但有时候也需要非方形的窗体,如圆形,椭圆甚至是不规则形状的对话框。</p>
<p>实现步骤：</p>
<ul>
<li><p>新建一个项目，比如项目名称叫做“ShapeWidget”，给此项目添加一个类“ShapeWidget”，基类选择“QWidget”。</p>
</li>
<li><p>为了使该不规则窗体可以通过鼠标随意拖拽，在类中重定义鼠标事件：mousePressEvent（）、mouseMoveEvent（）、以及绘制函数paintEvent（）</p>
</li>
<li><p>“ShapeWidget”的构造函数部分是实现该不规则窗体的关键，添加具体代码如下：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建一个Pixmap对象</span></span><br><span class="line"></span><br><span class="line">  QPixmap pixmap;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//加载图片</span></span><br><span class="line"></span><br><span class="line">  pixmap.<span class="built_in">load</span>(<span class="string">&quot;:/new/prefix1/image/sunny.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//固定窗口大小，将窗口大小设置为图片大小</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setFixedSize</span>( pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>() );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//给窗口去掉边框，设置窗口的flags</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setWindowFlags</span>(Qt::FramelessWindowHint | <span class="built_in">windowFlags</span>() );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置透明背景</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setAttribute</span>(Qt::WA_TranslucentBackground);</span><br></pre></td></tr></table></figure>



<ul>
<li>重新实现鼠标事件和绘制函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShareWidget::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 求出窗口移动之前的坐标</span></span><br><span class="line"></span><br><span class="line">  m_dragPoint = ev-&gt;<span class="built_in">globalPos</span>()-<span class="built_in">frameGeometry</span>().<span class="built_in">topLeft</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标右键关闭窗口</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShareWidget::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ev-&gt;<span class="built_in">buttons</span>() &amp; Qt::LeftButton)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是鼠标左键拖动, 移动窗口</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">move</span>(ev-&gt;<span class="built_in">globalPos</span>() - m_dragPoint);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShareWidget::paintEvent</span><span class="params">(QPaintEvent *ev)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Q_UNUSED</span>(ev)</span><br><span class="line"></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新绘制图片</span></span><br><span class="line"></span><br><span class="line">painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">QPixmap</span>(<span class="string">&quot;:/ButterFly&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>












<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>4、Qt窗口系统</title>
    <url>/archives/61071251.html</url>
    <content><![CDATA[<h2 id="4-1-Qt窗口坐标体系"><a href="#4-1-Qt窗口坐标体系" class="headerlink" title="4.1 Qt窗口坐标体系"></a>4.1 Qt窗口坐标体系</h2><h3 id="坐标体系"><a href="#坐标体系" class="headerlink" title="坐标体系"></a>坐标体系</h3><p>以左上角为原点，X向右增加，Y向下增加。</p>
<p>​                            <img src="/photos/image011.png" alt="QT">   </p>
<p>对于嵌套窗口，其坐标是<strong>相对于父窗口</strong>来说的。</p>
<h2 id="4-2-QWidget"><a href="#4-2-QWidget" class="headerlink" title="4.2 QWidget"></a>4.2 QWidget</h2><p>所有窗口及窗口控件都是从QWidget直接或间接派生出来的。</p>
<h3 id="4-2-1-对象模型"><a href="#4-2-1-对象模型" class="headerlink" title="4.2.1 对象模型"></a>4.2.1 对象模型</h3><p>在Qt中创建对象的时候会提供一个Parent对象指针，下面来解释这个parent到底是干什么的。</p>
<ul>
<li><p>QObject是以对象树的形式组织起来的。</p>
</li>
<li><p>当你创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是 parent，也就是父对象指针。</p>
</li>
</ul>
<p>这相当于，<strong>在创建QObject对象时，可以提供一个其父对象，我们创建的这个QObject对象会自动添加到其父对象的children()列表。</strong></p>
<ul>
<li><strong>当父对象析构的时候，这个列表中的所有对象也会被析构。（注意，这里的父对象并不是继承意义上的父类！）</strong></li>
</ul>
<p>这种机制在 GUI 程序设计中相当有用。例如，一个按钮有一个QShortcut（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键理应被删除。这是合理的。</p>
<ul>
<li><p>QWidget是能够在屏幕上显示的一切组件的父类。</p>
</li>
<li><p><strong>QWidget****继承自QObject，因此也继承了这种对象树关系。一个孩子自动地成为父组件的一个子组件</strong>。因此，它会显示在父组件的坐标系统中，被父组件的边界剪裁。例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。</p>
</li>
<li><p>当然，<strong>我们也可以自己删除子对象，它们会自动从其父对象列表中删除。</strong>比如，当我们删除了一个工具栏时，其所在的主窗口会自动将该工具栏从其子对象列表中删除，并且自动调整屏幕显示。</p>
</li>
</ul>
<p>Qt 引入对象树的概念，在一定程度上解决了内存问题。</p>
<ul>
<li><p>当一个QObject对象在堆上创建的时候，Qt 会同时为其创建一个对象树。不过，对象树中对象的顺序是没有定义的。这意味着，销毁这些对象的顺序也是未定义的。</p>
</li>
<li><p>任何对象树中的 QObject对象 delete 的时候，如果这个对象有 parent，则自动将其从 parent 的children()列表中删除；如果有孩子，则自动 delete 每一个孩子。Qt 保证没有QObject会被 delete 两次，这是由析构顺序决定的。</p>
</li>
</ul>
<p>如果QObject在栈上创建，Qt 保持同样的行为。正常情况下，这也不会发生什么问题。来看下下面的代码片段：<br> <span id="more"></span></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QWidget window;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPushButton <span class="title">quit</span><span class="params">(<span class="string">&quot;Quit&quot;</span>, &amp;window)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>作为父组件的 window 和作为子组件的 quit 都是QObject的子类（事实上，它们都是QWidget的子类，而QWidget是QObject的子类）。这段代码是正确的，quit 的析构函数不会被调用两次，因为标准 C++要求，<strong>局部对象的析构顺序应该按照其创建顺序的相反过程</strong>。因此，这段代码在超出作用域时，会先调用 quit 的析构函数，将其从父对象 window 的子对象列表中删除，然后才会再调用 window 的析构函数。</p>
<p>但是，如果我们使用下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QPushButton <span class="title">quit</span><span class="params">(<span class="string">&quot;Quit&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QWidget window;</span><br><span class="line"></span><br><span class="line">  quit.<span class="built_in">setParent</span>(&amp;window);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>情况又有所不同，析构顺序就有了问题。我们看到，在上面的代码中，作为父对象的 window 会首先被析构，因为它是最后一个创建的对象。在析构过程中，它会调用子对象列表中每一个对象的析构函数，也就是说， quit 此时就被析构了。然后，代码继续执行，在 window 析构之后，quit 也会被析构，因为 quit 也是一个局部变量，在超出作用域的时候当然也需要析构。但是，这时候已经是第二次调用 quit 的析构函数了，C++ 不允许调用两次析构函数，因此，程序崩溃了。</p>
<p>由此我们看到，Qt 的对象树机制虽然帮助我们在一定程度上解决了内存问题，但是也引入了一些值得注意的事情。这些细节在今后的开发过程中很可能时不时跳出来烦扰一下，所以，我们最好从开始就养成良好习惯，在 Qt 中，尽量在构造的时候就指定 parent 对象，并且大胆在堆上创建。</p>
<h2 id="4-3-QMainWindow"><a href="#4-3-QMainWindow" class="headerlink" title="4.3 QMainWindow"></a>4.3 QMainWindow</h2><p>QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)、一个状态栏(status bar)及一个中心部件(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等。</p>
<p> <img src="/photos/image012.png" alt="QT"></p>
<h3 id="4-3-1-菜单栏"><a href="#4-3-1-菜单栏" class="headerlink" title="4.3.1 菜单栏"></a>4.3.1 菜单栏</h3><p>一个主窗口最多只有一个菜单栏。位于主窗口顶部、主窗口标题栏下面。</p>
<ul>
<li>创建菜单栏，通过QMainWindow类的menubar（）函数获取主窗口菜单栏指针</li>
</ul>
<p>​	QMenuBar * menuBar() const</p>
<ul>
<li>创建菜单，调用QMenu的成员函数addMenu来添加菜单</li>
</ul>
<p>​	QAction* addMenu(QMenu * menu)</p>
<p>​	QMenu* addMenu(const QString &amp; title)</p>
<p>​	QMenu* addMenu(const QIcon &amp; icon, const QString &amp; title)</p>
<ul>
<li>创建菜单项，调用QMenu的成员函数addAction来添加菜单项</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QAction* <span class="title">activeAction</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">QAction* <span class="title">addAction</span><span class="params">(<span class="type">const</span> QString &amp; text)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">QAction* <span class="title">addAction</span><span class="params">(<span class="type">const</span> QIcon &amp; icon, <span class="type">const</span> QString &amp; text)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">QAction* <span class="title">addAction</span><span class="params">(<span class="type">const</span> QString &amp; text, <span class="type">const</span> QObject * receiver,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="type">const</span> <span class="type">char</span> * member, <span class="type">const</span> QKeySequence &amp; shortcut = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">QAction* <span class="title">addAction</span><span class="params">(<span class="type">const</span> QIcon &amp; icon, <span class="type">const</span> QString &amp; text, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QObject * receiver, <span class="type">const</span> <span class="type">char</span> * member, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QKeySequence &amp; shortcut = <span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure>



<p>Qt 并没有专门的菜单项类，只是使用一个QAction类，抽象出公共的动作。当我们把QAction对象添加到菜单，就显示成一个菜单项，添加到工具栏，就显示成一个工具按钮。用户可以通过点击菜单项、点击工具栏按钮、点击快捷键来激活这个动作。</p>
<h3 id="4-3-2-工具栏"><a href="#4-3-2-工具栏" class="headerlink" title="4.3.2 工具栏"></a>4.3.2 工具栏</h3><p>主窗口的工具栏上可以有多个工具条，通常采用一个菜单对应一个工具条的的方式，也可根据需要进行工具条的划分。</p>
<ul>
<li><p>直接调用QMainWindow类的addToolBar（）函数获取主窗口的工具条对象，每增加一个工具条都需要调用一次该函数。</p>
</li>
<li><p>插入属于工具条的动作，即在工具条上添加操作。</p>
</li>
</ul>
<p>通过QToolBar类的addAction函数添加。</p>
<ul>
<li><p>工具条是一个可移动的窗口，它的停靠区域由QToolBar的allowAreas决定，包括：</p>
</li>
<li><p>Qt::LeftToolBarArea   停靠在左侧</p>
</li>
<li><p>Qt::RightToolBarArea   停靠在右侧</p>
</li>
<li><p>Qt::TopToolBarArea    停靠在顶部</p>
</li>
<li><p>Qt::BottomToolBarArea   停靠在底部</p>
</li>
<li><p>Qt::AllToolBarAreas   以上四个位置都可停靠</p>
</li>
</ul>
<p><strong>使用setAllowedAreas（）函数指定停靠区域：</strong></p>
<p>setAllowedAreas（Qt::LeftToolBarArea | Qt::RightToolBarArea）</p>
<p><strong>使用setMoveable（）函数设定工具栏的可移动性：</strong></p>
<p>setMoveable（false）&#x2F;&#x2F;工具条不可移动, 只能停靠在初始化的位置上</p>
<h3 id="4-3-3-状态栏"><a href="#4-3-3-状态栏" class="headerlink" title="4.3.3 状态栏"></a>4.3.3 状态栏</h3><ul>
<li>派生自QWidget类，使用方法与QWidget类似，QStatusBar类常用成员函数：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加小部件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addWidget</span><span class="params">(QWidget * widget, <span class="type">int</span> stretch = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//插入小部件</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertWidget</span><span class="params">(<span class="type">int</span> index, QWidget * widget, <span class="type">int</span> stretch = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//删除小部件</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeWidget</span><span class="params">(QWidget * widget)</span></span></span><br></pre></td></tr></table></figure>



<h2 id="4-4-资源文件"><a href="#4-4-资源文件" class="headerlink" title="4.4 资源文件"></a>4.4 资源文件</h2><p>Qt 资源系统是一个跨平台的资源机制，用于将程序运行时所需要的资源以二进制的形式存储于可执行文件内部。如果你的程序需要加载特定的资源（图标、文本翻译等），那么，将其放置在资源文件中，就再也不需要担心这些文件的丢失。也就是说，如果你将资源以资源文件形式存储，它是会编译到可执行文件内部。</p>
<p>使用 Qt Creator 可以很方便地创建资源文件。我们可以在工程上点右键，选择“添加新文件…”，可以在 Qt 分类下找到“Qt 资源文件”：</p>
<p> <img src="/photos/image013.png" alt="QT"></p>
<p>点击“选择…”按钮，打开“新建 Qt 资源文件”对话框。在这里我们输入资源文件的名字和路径：</p>
<p> <img src="/photos/image014.png" alt="QT"></p>
<p>点击下一步，选择所需要的版本控制系统，然后直接选择完成。我们可以在 Qt Creator 的左侧文件列表中看到“资源文件”一项，也就是我们新创建的资源文件：</p>
<p> <img src="/photos/image015.png" alt="QT"></p>
<p>右侧的编辑区有个“添加”，我们首先需要添加前缀，比如我们将前缀取名为 images。然后选中这个前缀，继续点击添加文件，可以找到我们所需添加的文件。这里，我们选择 document-open.png 文件。</p>
<p>接下来，我们还可以添加另外的前缀或者另外的文件。这取决于你的需要。当我们添加完成之后，我们可以像前面一章讲解的那样，通过使用 : 开头的路径来找到这个文件。比如，我们的前缀是 &#x2F;images，文件是 document-open.png，那么就可以使用:&#x2F;images&#x2F;document-open.png找到这个文件。</p>
<p>这么做带来的一个问题是，如果以后我们要更改文件名，比如将 docuemnt-open.png 改成 docopen.png，那么，所有使用了这个名字的路径都需要修改。所以，更好的办法是，我们给这个文件去一个“别名”，以后就以这个别名来引用这个文件。具体做法是，选中这个文件，添加别名信息：</p>
<p> <img src="/photos/image016.png" alt="QT"></p>
<p>这样，我们可以直接使用:&#x2F;images&#x2F;doc-open引用到这个资源，无需关心图片的真实文件名。</p>
<p>如果我们使用文本编辑器打开 res.qrc 文件，就会看到一下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RCC</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">qresource</span> <span class="attr">prefix</span>=<span class="string">&quot;/images&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">file</span> <span class="attr">alias</span>=<span class="string">&quot;doc-open&quot;</span>&gt;</span>document-open.png<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;/<span class="name">qresource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">qresource</span> <span class="attr">prefix</span>=<span class="string">&quot;/images/fr&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;fr&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">file</span> <span class="attr">alias</span>=<span class="string">&quot;doc-open&quot;</span>&gt;</span>document-open-fr.png<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;/<span class="name">qresource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RCC</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>我们可以对比一下，看看 Qt Creator 帮我们生成的是怎样的 qrc 文件。当我们编译工程之后，我们可以在构建目录中找到 qrc_res.cpp 文件，这就是 Qt 将我们的资源编译成了 C++ 代码。</p>
<h2 id="4-5-对话框QDialog"><a href="#4-5-对话框QDialog" class="headerlink" title="4.5 对话框QDialog"></a>4.5 对话框QDialog</h2><h3 id="4-5-1-基本概念"><a href="#4-5-1-基本概念" class="headerlink" title="4.5.1 基本概念"></a>4.5.1 基本概念</h3><p>对话框是 GUI 程序中不可或缺的组成部分。很多不能或者不适合放入主窗口的功能组件都必须放在对话框中设置。对话框通常会是一个顶层窗口，出现在程序最上层，用于实现短期任务或者简洁的用户交互。</p>
<p>Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个类继承QDialog。QDialog（及其子类，以及所有Qt::Dialog类型的类）的对于其 parent 指针都有额外的解释：<strong>如果 parent 为 NULL，则该对话框会作为一个顶层窗口，否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心）。顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。</strong></p>
<p><strong>对话框分为模态对话框和非模态对话框。</strong></p>
<ul>
<li>模态对话框，就是会阻塞同一应用程序中其它窗口的输入。</li>
</ul>
<p>模态对话框很常见，比如“打开文件”功能。你可以尝试一下记事本的打开文件，当打开文件对话框出现时，我们是不能对除此对话框之外的窗口部分进行操作的。</p>
<ul>
<li>与此相反的是非模态对话框，例如查找对话框，我们可以在显示着查找对话框的同时，继续对记事本的内容进行编辑。</li>
</ul>
<h3 id="4-5-2-标准对话框"><a href="#4-5-2-标准对话框" class="headerlink" title="4.5.2 标准对话框"></a>4.5.2 标准对话框</h3><p>所谓标准对话框，是 Qt 内置的一系列对话框，用于简化开发。事实上，有很多对话框都是通用的，比如打开文件、设置颜色、打印设置等。这些对话框在所有程序中几乎相同，因此没有必要在每一个程序中都自己实现这么一个对话框。</p>
<p>Qt 的内置对话框大致分为以下几类：</p>
<ul>
<li><p>QColorDialog：    选择颜色；</p>
</li>
<li><p>QFileDialog：    选择文件或者目录；</p>
</li>
<li><p>QFontDialog：    选择字体；</p>
</li>
<li><p>QInputDialog：    允许用户输入一个值，并将其值返回；</p>
</li>
<li><p>QMessageBox：    模态对话框，用于显示信息、询问问题等；</p>
</li>
<li><p>QPageSetupDialog：  为打印机提供纸张相关的选项；</p>
</li>
<li><p>QPrintDialog：    打印机配置；</p>
</li>
<li><p>QPrintPreviewDialog：打印预览；</p>
</li>
<li><p>QProgressDialog：  显示操作过程。</p>
</li>
</ul>
<h3 id="4-5-3-自定义消息框"><a href="#4-5-3-自定义消息框" class="headerlink" title="4.5.3 自定义消息框"></a>4.5.3 自定义消息框</h3><p>Qt 支持模态对话框和非模态对话框。</p>
<p>模态与非模态的实现：</p>
<ul>
<li><p>使用QDialog::exec()实现应用程序级别的模态对话框</p>
</li>
<li><p>使用QDialog::open()实现窗口级别的模态对话框</p>
</li>
<li><p>使用QDialog::show()实现非模态对话框。</p>
</li>
</ul>
<h4 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h4><ul>
<li><p>Qt 有两种级别的模态对话框：</p>
</li>
<li><p>应用程序级别的模态</p>
</li>
</ul>
<p>当该种模态的对话框出现时，用户必须首先对对话框进行交互，直到关闭对话框，然后才能访问程序中其他的窗口。</p>
<ul>
<li>窗口级别的模态</li>
</ul>
<p>该模态仅仅阻塞与对话框关联的窗口，但是依然允许用户与程序中其它窗口交互。窗口级别的模态尤其适用于多窗口模式。</p>
<p>一般默认是应用程序级别的模态。</p>
<p>在下面的示例中，我们调用了exec()将对话框显示出来，因此这就是一个模态对话框。当对话框出现时，我们不能与主窗口进行任何交互，直到我们关闭了该对话框。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::open</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    QDialog dialog;</span><br><span class="line"></span><br><span class="line">​    dialog.<span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;Hello, dialog!&quot;</span>));</span><br><span class="line"></span><br><span class="line">dialog.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h4><p>下面我们试着将exec()修改为show()，看看非模态对话框：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::open</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QDialog <span class="title">dialog</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  dialog.<span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;Hello, dialog!&quot;</span>));</span><br><span class="line"></span><br><span class="line">  dialog.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>是不是事与愿违？对话框竟然一闪而过！这是因为，<strong>show()函数不会阻塞当前线程，对话框会显示出来，然后函数立即返回，代码继续执行。</strong>注意，dialog 是建立在栈上的，show()函数返回，MainWindow::open()函数结束，dialog 超出作用域被析构，因此对话框消失了。知道了原因就好改了，我们将 dialog 改成堆上建立，当然就没有这个问题了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::open</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QDialog *dialog = <span class="keyword">new</span> QDialog;</span><br><span class="line"></span><br><span class="line">  dialog-&gt;<span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;Hello, dialog!&quot;</span>));</span><br><span class="line"></span><br><span class="line">  dialog-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果你足够细心，应该发现上面的代码是有问题的：dialog 存在内存泄露！dialog 使用 new 在堆上分配空间，却一直没有 delete。解决方案也很简单：将 MainWindow 的指针赋给 dialog 即可。还记得我们前面说过的 Qt 的对象系统吗？</p>
<p>不过，这样做有一个问题：如果我们的对话框不是在一个界面类中出现呢？由于QWidget的 parent 必须是QWidget指针，那就限制了我们不能将一个普通的 C++ 类指针传给 Qt 对话框。另外，如果对内存占用有严格限制的话，当我们将主窗口作为 parent 时，主窗口不关闭，对话框就不会被销毁，所以会一直占用内存。在这种情景下，我们可以设置 dialog 的WindowAttribute：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::open</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QDialog *dialog = <span class="keyword">new</span> QDialog;</span><br><span class="line"></span><br><span class="line">  **dialog-&gt;<span class="built_in">setAttribute</span>(Qt::WA_DeleteOnClose);**</span><br><span class="line"></span><br><span class="line">  dialog-&gt;<span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;Hello, dialog!&quot;</span>));</span><br><span class="line"></span><br><span class="line">  dialog-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>**setAttribute()**<strong>函数设置对话框关闭时，自动销毁对话框。</strong></p>
<h3 id="4-5-4-消息对话框"><a href="#4-5-4-消息对话框" class="headerlink" title="4.5.4 消息对话框"></a>4.5.4 消息对话框</h3><p>QMessageBox用于显示消息提示。我们一般会使用其提供的几个 static 函数：</p>
<ul>
<li>显示关于对话框。</li>
</ul>
<p>void about(QWidget * parent, const QString &amp; title, const QString &amp; text)</p>
<p>这是一个最简单的对话框，其标题是 title，内容是 text，父窗口是 parent。对话框只有一个 OK 按钮。</p>
<ul>
<li>显示关于 Qt 对话框。该对话框用于显示有关 Qt 的信息。</li>
</ul>
<p>void aboutQt(QWidget * parent, const QString &amp; title &#x3D; QString())： </p>
<ul>
<li>显示严重错误对话框。</li>
</ul>
<p>StandardButton critical(QWidget * parent, </p>
<p>const QString &amp; title, </p>
<p>const QString &amp; text, </p>
<p>StandardButtons buttons &#x3D; Ok, </p>
<p>StandardButton defaultButton &#x3D; NoButton)：</p>
<p>这个对话框将显示一个红色的错误符号。我们可以通过 buttons 参数指明其显示的按钮。默认情况下只有一个 Ok 按钮，我们可以使用StandardButtons类型指定多种按钮。</p>
<ul>
<li>与QMessageBox::critical()类似，不同之处在于这个对话框提供一个普通信息图标。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">StandardButton <span class="title">information</span><span class="params">(QWidget * parent, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QString &amp; title, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QString &amp; text, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">StandardButtons buttons = Ok, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">StandardButton defaultButton = NoButton)</span></span></span><br></pre></td></tr></table></figure>



<ul>
<li>与QMessageBox::critical()类似，不同之处在于这个对话框提供一个问号图标，并且其显示的按钮是“是”和“否”。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">StandardButton <span class="title">question</span><span class="params">(QWidget * parent,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QString &amp; title, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QString &amp; text, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">StandardButtons buttons = StandardButtons( Yes | No ), </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">StandardButton defaultButton = NoButton)</span> </span></span><br></pre></td></tr></table></figure>



<ul>
<li>与QMessageBox::critical()类似，不同之处在于这个对话框提供一个黄色叹号图标。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">StandardButton <span class="title">warning</span><span class="params">(QWidget * parent, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QString &amp; title, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QString &amp; text, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">StandardButtons buttons = Ok, </span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">StandardButton defaultButton = NoButton)</span></span></span><br></pre></td></tr></table></figure>



<p>我们可以通过下面的代码来演示下如何使用QMessageBox。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (QMessageBox::Yes == QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>,</span><br><span class="line"></span><br><span class="line">​       <span class="built_in">tr</span>(<span class="string">&quot;Question&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;Are you OK?&quot;</span>),</span><br><span class="line"></span><br><span class="line">​       QMessageBox::Yes | QMessageBox::No,</span><br><span class="line"></span><br><span class="line">​       QMessageBox::Yes)) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Hmmm...&quot;</span>), </span><br><span class="line"></span><br><span class="line"><span class="built_in">tr</span>(<span class="string">&quot;I&#x27;m glad to hear that!&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Hmmm...&quot;</span>), </span><br><span class="line"></span><br><span class="line"><span class="built_in">tr</span>(<span class="string">&quot;I&#x27;m sorry!&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们使用QMessageBox::question()来询问一个问题。</p>
<ul>
<li>这个对话框的父窗口是 this。</li>
</ul>
<p>QMessageBox是QDialog的子类，这意味着它的初始显示位置将会是在 parent 窗口的中央。</p>
<ul>
<li><p>第二个参数是对话框的标题。</p>
</li>
<li><p>第三个参数是我们想要显示的内容。</p>
</li>
</ul>
<p>这里就是我们需要询问的文字。下面，我们使用或运算符（|）指定对话框应该出现的按钮。这里我们希望是一个 Yes 和一个 No。</p>
<ul>
<li>最后一个参数指定默认选择的按钮。</li>
</ul>
<p>这个函数有一个返回值，用于确定用户点击的是哪一个按钮。按照我们的写法，应该很容易的看出，这是一个模态对话框，因此我们可以直接获取其返回值。</p>
<p>QMessageBox类的 static 函数优点是方便使用，缺点也很明显：非常不灵活。我们只能使用简单的几种形式。为了能够定制QMessageBox细节，我们必须使用QMessageBox的属性设置 API。如果我们希望制作一个询问是否保存的对话框，我们可以使用如下的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QMessageBox msgBox;</span><br><span class="line"></span><br><span class="line">msgBox.<span class="built_in">setText</span>(<span class="built_in">tr</span>(<span class="string">&quot;The document has been modified.&quot;</span>));</span><br><span class="line"></span><br><span class="line">msgBox.<span class="built_in">setInformativeText</span>(<span class="built_in">tr</span>(<span class="string">&quot;Do you want to save your changes?&quot;</span>));</span><br><span class="line"></span><br><span class="line">msgBox.<span class="built_in">setDetailedText</span>(<span class="built_in">tr</span>(<span class="string">&quot;Differences here...&quot;</span>));</span><br><span class="line"></span><br><span class="line">msgBox.<span class="built_in">setStandardButtons</span>(QMessageBox::Save</span><br><span class="line"></span><br><span class="line">​             | QMessageBox::Discard</span><br><span class="line"></span><br><span class="line">​             | QMessageBox::Cancel);</span><br><span class="line"></span><br><span class="line">msgBox.<span class="built_in">setDefaultButton</span>(QMessageBox::Save);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = msgBox.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ret) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> QMessageBox::Save:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Save document!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> QMessageBox::Discard:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Discard changes!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> QMessageBox::Cancel:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Close document!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>msgBox 是一个建立在栈上的QMessageBox实例。我们设置其主要文本信息为“The document has been modified.”，informativeText 则是会在对话框中显示的简单说明文字。下面我们使用了一个detailedText，也就是详细信息，当我们点击了详细信息按钮时，对话框可以自动显示更多信息。我们自己定义的对话框的按钮有三个：保存、丢弃和取消。然后我们使用了exec()是其成为一个模态对话框，根据其返回值进行相应的操作。</p>
<h3 id="4-5-5-标准文件对话框"><a href="#4-5-5-标准文件对话框" class="headerlink" title="4.5.5 标准文件对话框"></a>4.5.5 标准文件对话框</h3><p>QFileDialog，也就是文件对话框。在本节中，我们将尝试编写一个简单的文本文件编辑器，我们将使用QFileDialog来打开一个文本文件，并将修改过的文件保存到硬盘。</p>
<p>首先，我们需要创建一个带有文本编辑功能的窗口。借用我们前面的程序代码，应该可以很方便地完成：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">openAction = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/images/file-open&quot;</span>),</span><br><span class="line"></span><br><span class="line"> <span class="built_in">tr</span>(<span class="string">&quot;&amp;Open...&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">openAction-&gt;<span class="built_in">setShortcuts</span>(QKeySequence::Open);</span><br><span class="line"></span><br><span class="line">openAction-&gt;<span class="built_in">setStatusTip</span>(<span class="built_in">tr</span>(<span class="string">&quot;Open an existing file&quot;</span>));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">saveAction = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/images/file-save&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="built_in">tr</span>(<span class="string">&quot;&amp;Save...&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">saveAction-&gt;<span class="built_in">setShortcuts</span>(QKeySequence::Save);</span><br><span class="line"></span><br><span class="line">saveAction-&gt;<span class="built_in">setStatusTip</span>(<span class="built_in">tr</span>(<span class="string">&quot;Save a new file&quot;</span>));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">QMenu *file = <span class="built_in">menuBar</span>()-&gt;<span class="built_in">addMenu</span>(<span class="built_in">tr</span>(<span class="string">&quot;&amp;File&quot;</span>));</span><br><span class="line"></span><br><span class="line">file-&gt;<span class="built_in">addAction</span>(openAction);</span><br><span class="line"></span><br><span class="line">file-&gt;<span class="built_in">addAction</span>(saveAction);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">QToolBar *toolBar = <span class="built_in">addToolBar</span>(<span class="built_in">tr</span>(<span class="string">&quot;&amp;File&quot;</span>));</span><br><span class="line"></span><br><span class="line">toolBar-&gt;<span class="built_in">addAction</span>(openAction);</span><br><span class="line"></span><br><span class="line">toolBar-&gt;<span class="built_in">addAction</span>(saveAction);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">textEdit = <span class="keyword">new</span> <span class="built_in">QTextEdit</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setCentralWidget</span>(textEdit);</span><br></pre></td></tr></table></figure>



<p>我们在菜单和工具栏添加了两个动作：打开和保存。接下来是一个QTextEdit类，这个类用于显示富文本文件。也就是说，它不仅仅用于显示文本，还可以显示图片、表格等等。不过，我们现在只用它显示纯文本文件。QMainWindow有一个setCentralWidget()函数，可以将一个组件作为窗口的中心组件，放在窗口中央显示区。显然，在一个文本编辑器中，文本编辑区就是这个中心组件，因此我们将QTextEdit作为这种组件。</p>
<p>我们使用connect()函数，为这两个QAction对象添加响应的动作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(openAction, &amp;QAction::triggered, </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>, &amp;MainWindow::openFile);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(saveAction, &amp;QAction::triggered, </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>, &amp;MainWindow::saveFile);</span><br></pre></td></tr></table></figure>



<p>下面是最主要的openFile()和saveFile()这两个函数的代码：</p>
<p>&#x2F;&#x2F;打开文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::openFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>,</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">tr</span>(<span class="string">&quot;Open File&quot;</span>), <span class="string">&quot;.&quot;</span>, <span class="built_in">tr</span>(<span class="string">&quot;Text Files(*.txt)&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!path.<span class="built_in">isEmpty</span>()) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="function">QFile <span class="title">file</span><span class="params">(path)</span></span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QIODevice::ReadOnly | QIODevice::Text)) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​      QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Read File&quot;</span>),</span><br><span class="line"></span><br><span class="line">​             <span class="built_in">tr</span>(<span class="string">&quot;Cannot open file:/n%1&quot;</span>).<span class="built_in">arg</span>(path));</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">​    textEdit-&gt;<span class="built_in">setText</span>(in.<span class="built_in">readAll</span>());</span><br><span class="line"></span><br><span class="line">​    file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Path&quot;</span>),</span><br><span class="line"></span><br><span class="line">​               <span class="built_in">tr</span>(<span class="string">&quot;You did not select any file.&quot;</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::saveFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  QString path = QFileDialog::<span class="built_in">getSaveFileName</span>(<span class="keyword">this</span>,</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">tr</span>(<span class="string">&quot;Open File&quot;</span>), <span class="string">&quot;.&quot;</span>, <span class="built_in">tr</span>(<span class="string">&quot;Text Files(*.txt)&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!path.<span class="built_in">isEmpty</span>()) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="function">QFile <span class="title">file</span><span class="params">(path)</span></span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (!file.<span class="built_in">open</span>(QIODevice::WriteOnly | QIODevice::Text)) </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​      QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Write File&quot;</span>),</span><br><span class="line"></span><br><span class="line">​             <span class="built_in">tr</span>(<span class="string">&quot;Cannot open file:/n%1&quot;</span>).<span class="built_in">arg</span>(path));</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">​    out &lt;&lt; textEdit-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line"></span><br><span class="line">​    file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Path&quot;</span>),</span><br><span class="line"></span><br><span class="line">​               <span class="built_in">tr</span>(<span class="string">&quot;You did not select any file.&quot;</span>));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在openFile()函数中，我们使用QFileDialog::getOpenFileName()来获取需要打开的文件的路径。这个函数原型如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QString <span class="title">getOpenFileName</span><span class="params">(QWidget * parent = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">​            <span class="type">const</span> QString &amp; caption = QString(),</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">​            <span class="type">const</span> QString &amp; dir = QString(),</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">​             <span class="type">const</span> QString &amp; filter = QString(),</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">​            QString * selectedFilter = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">​            Options options = <span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure>



<p>不过注意，它的所有参数都是可选的，因此在一定程度上说，这个函数也是简单的。这六个参数分别是：</p>
<ul>
<li>parent：父窗口。</li>
</ul>
<p>Qt 的标准对话框提供静态函数，用于返回一个模态对话框；</p>
<ul>
<li><p>caption：对话框标题；</p>
</li>
<li><p>dir：对话框打开时的默认目录</p>
</li>
<li><p>“.” 代表程序运行目录</p>
</li>
<li><p>“&#x2F;” 代表当前盘符的根目录（特指 Windows 平台；Linux 平台当然就是根目录），这个参数也可以是平台相关的，比如“C:&#x2F;&#x2F;”等；</p>
</li>
<li><p>filter：过滤器。</p>
</li>
</ul>
<p>我们使用文件对话框可以浏览很多类型的文件，但是，很多时候我们仅希望打开特定类型的文件。比如，文本编辑器希望打开文本文件，图片浏览器希望打开图片文件。<strong>过滤器就是用于过滤特定的后缀名</strong>。如果我们使用“Image Files(<em>.jpg <em>.png)”，则只能显示后缀名是 jpg 或者 png 的文件。<strong>如果需要多个过滤器，使用“;;”分割</strong>，比如“JPEG Files(</em>.jpg);;PNG Files(</em>.png)”；</p>
<ul>
<li><p>selectedFilter：默认选择的过滤器；</p>
</li>
<li><p>options：对话框的一些参数设定</p>
</li>
</ul>
<p>比如只显示文件夹等等，它的取值是enum QFileDialog::Option，每个选项可以使用 | 运算组合起来。</p>
<p>**QFileDialog::getOpenFileName()**<strong>返回值是选择的文件路径。</strong>我们将其赋值给 path。通过判断 path 是否为空，可以确定用户是否选择了某一文件。只有当用户选择了一个文件时，我们才执行下面的操作。</p>
<p>在saveFile()中使用的QFileDialog::getSaveFileName()也是类似的。使用这种静态函数，在 Windows、Mac OS 上面都是直接调用本地对话框，但是 Linux 上则是QFileDialog自己的模拟。这暗示了，如果你不使用这些静态函数，而是直接使用QFileDialog进行设置，那么得到的对话框很可能与系统对话框的外观不一致。这一点是需要注意的。</p>
<h2 id="4-6-常用控件"><a href="#4-6-常用控件" class="headerlink" title="4.6 常用控件"></a>4.6 常用控件</h2><p>Qt为我们应用程序界面开发提供的一系列的控件，下面我们介绍两种最常用的两种，所有控件的使用方法我们都可以通过帮助文档获取。</p>
<h3 id="4-6-1-QLabel控件使用"><a href="#4-6-1-QLabel控件使用" class="headerlink" title="4.6.1 QLabel控件使用"></a>4.6.1 QLabel控件使用</h3><p>QLabel是我们最常用的控件之一，其功能很强大，我们可以用来显示文本，图片和动画等。</p>
<h4 id="显示文字-（普通文本、html）"><a href="#显示文字-（普通文本、html）" class="headerlink" title="显示文字 （普通文本、html）"></a>显示文字 （普通文本、html）</h4><p>通过QLabel类的setText函数设置显示的内容:</p>
<p>void  setText(const QString &amp;)</p>
<ul>
<li>可以显示普通文本字符串</li>
</ul>
<p>QLable *label &#x3D; new QLable;</p>
<p>label-&gt;setText(“Hello, World!”);</p>
<ul>
<li>可以显示HTML格式的字符串</li>
</ul>
<p>​	比如显示一个链接:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">label -&gt;<span class="built_in">setText</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line"></span><br><span class="line">label -&gt;<span class="built_in">setText</span>(<span class="string">&quot;&lt;h1&gt;&lt;a href=/&quot;</span>https:<span class="comment">//www.baidu.com/&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">百度一下&lt;/a&gt;&lt;/h1&gt;<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">label -&gt;setOpenExternalLinks(true);</span></span><br></pre></td></tr></table></figure>



<p>其中setOpenExternalLinks()函数是用来设置用户点击链接之后是否自动打开链接，如果参数指定为true则会自动打开，如果设置为false，想要打开链接只能通过捕捉linkActivated()信号，在自定义的槽函数中使用QDesktopServices::openUrl()打开链接，该函数参数默认值为false</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">label -&gt;<span class="built_in">setText</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line"></span><br><span class="line">label -&gt;<span class="built_in">setText</span>(<span class="string">&quot;&lt;h1&gt;&lt;a href=/&quot;</span>https:<span class="comment">//www.baidu.com/&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">百度一下&lt;/a&gt;&lt;/h1&gt;<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// label-&gt;setOpenExternalLinks(true);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">connect(label, &amp;QLabel::linkActivated, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">this, &amp;MyWidget::slotOpenUrl);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//槽函数  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">void MyWidget::slotOpenUrl(const QString &amp;link)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  QDesktopServices::openUrl(QUrl(link));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h4><p>可以使用QLabel的成员函数setPixmap设置图片</p>
<p>void  setPixmap(const QPixmap &amp;)</p>
<p>首先定义QPixmap对象</p>
<p>QPixmap pixmap;</p>
<p>然后加载图片</p>
<p>pixmap.load(“:&#x2F;Image&#x2F;boat.jpg”);</p>
<p>最后将图片设置到QLabel中</p>
<p>QLabel *label &#x3D; new QLabel;</p>
<p>label.setPixmap(pixmap);</p>
<h4 id="显示动画"><a href="#显示动画" class="headerlink" title="显示动画"></a>显示动画</h4><p>可以使用QLabel 的成员函数setMovie加载动画，可以播放gif格式的文件</p>
<p>void  setMovie(QMovie * movie)</p>
<p>首先定义QMovied对象，并初始化:</p>
<p>QMovie *movie &#x3D; new QMovie(“:&#x2F;Mario.gif”);</p>
<p>播放加载的动画：</p>
<p>movie-&gt;start();</p>
<p>将动画设置到QLabel中：</p>
<p>QLabel *label &#x3D; new QLabel；</p>
<p>label-&gt;setMovie(movie);</p>
<h3 id="4-6-2-QLineEdit"><a href="#4-6-2-QLineEdit" class="headerlink" title="4.6.2 QLineEdit"></a>4.6.2 QLineEdit</h3><p>Qt提供的单行文本编辑框。</p>
<h4 id="设置-x2F-获取内容"><a href="#设置-x2F-获取内容" class="headerlink" title="设置&#x2F;获取内容"></a>设置&#x2F;获取内容</h4><ul>
<li>获取编辑框内容使用text（），函数声明如下：</li>
</ul>
<p>QString  text() const</p>
<ul>
<li>设置编辑框内容</li>
</ul>
<p>void  setText(const QString &amp;)</p>
<h4 id="设置显示模式"><a href="#设置显示模式" class="headerlink" title="设置显示模式"></a>设置显示模式</h4><p>使用QLineEdit类的setEchoMode () 函数设置文本的显示模式,函数声明:</p>
<p>void  setEchoMode(EchoMode mode)</p>
<p>EchoMode是一个枚举类型,一共定义了四种显示模式:</p>
<ul>
<li><p>QLineEdit::Normal  模式显示方式，按照输入的内容显示。</p>
</li>
<li><p>QLineEdit::NoEcho 不显示任何内容，此模式下无法看到用户的输入。</p>
</li>
<li><p>QLineEdit::Password 密码模式，输入的字符会根据平台转换为特殊字符。</p>
</li>
<li><p>QLineEdit::PasswordEchoOnEdit 编辑时显示字符否则显示字符作为密码。</p>
</li>
</ul>
<p>另外，我们再使用QLineEdit显示文本的时候，希望在左侧留出一段空白的区域，那么，就可以使用QLineEdit给我们提供的setTextMargins函数：</p>
<p>void setTextMargins(int left, int top, int right, int bottom)</p>
<p>用此函数可以指定显示的文本与输入框上下左右边界的间隔的像素数。</p>
<h4 id="设置输入提示"><a href="#设置输入提示" class="headerlink" title="设置输入提示"></a>设置输入提示</h4><p>如果我们想实现一个与百度的搜索框类似的功能：输入一个或几个字符，下边会列出几个跟输入的字符相匹配的字符串，QLineEdit要实现这样的功能可以使用该类的成员函数setComleter()函数来实现:</p>
<p>void  setCompleter(QCompleter * c)</p>
<p>创建QCompleter对象，并初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QStringList tipList;</span><br><span class="line"></span><br><span class="line">tipList&lt;&lt; “Hello” &lt;&lt; “how are you” &lt;&lt; “Haha” &lt;&lt; “oh, hello”;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不区分大小写</span></span><br><span class="line"></span><br><span class="line">completer-&gt;<span class="built_in">setCaseSensitivity</span>(Qt::CaseInsensitive);</span><br><span class="line"></span><br><span class="line">QCompleter *completer = <span class="keyword">new</span> <span class="built_in">QCompleter</span>(tipList, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>



<p>QCompleter类的setCaseSensitivity()函数可以设置是否区分大小写，它的参数是一个枚举类型：</p>
<ul>
<li><p>Qt::CaseInsensitive 不区分大小写</p>
</li>
<li><p>Qt::CaseSensitive  区分大小写</p>
</li>
</ul>
<p>如果不设置该属性，默认匹配字符串时是区分大小写的。</p>
<p>另外我们还可以设置字符串其中某一部分匹配，此功能可通过QCompleter类的setFilterMode函数来实现,函数声明如下:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">setFilterMode</span><span class="params">(Qt::MatchFlags filterMode)</span></span></span><br></pre></td></tr></table></figure>



<p>其参数为Qt定义的宏,有多重类型,具体可参考Qt帮助稳定，要实现我们上边提到的功能，参数可以使用 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Qt::MatchContains：</span><br><span class="line"></span><br><span class="line">completer-&gt;<span class="built_in">setFilterMode</span>(Qt::MatchContains);</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性设置完成之后，将QCompleter对象设置到QLineEdit中：</span></span><br><span class="line"></span><br><span class="line">QLineEdit *edit = <span class="keyword">new</span> <span class="built_in">QLineEdit</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">edit-&gt;<span class="built_in">setCompleter</span>(completer);</span><br></pre></td></tr></table></figure>



<p> <img src="/photos/image017.png" alt="QT"></p>
<h3 id="4-6-3-其他控件"><a href="#4-6-3-其他控件" class="headerlink" title="4.6.3 其他控件"></a>4.6.3 其他控件</h3><p>Qt中控件的使用方法可参考Qt提供的帮助文档。</p>
<h2 id="4-7-布局管理器"><a href="#4-7-布局管理器" class="headerlink" title="4.7 布局管理器"></a>4.7 布局管理器</h2><p>所谓 GUI 界面，归根结底，就是一堆组件的叠加。我们创建一个窗口，把按钮放上面，把图标放上面，这样就成了一个界面。在放置时，组件的位置尤其重要。我们必须要指定组件放在哪里，以便窗口能够按照我们需要的方式进行渲染。这就涉及到组件定位的机制。</p>
<p><strong>Qt</strong> <strong>提供了两种组件定位机制：绝对定位和布局定位。</strong></p>
<ul>
<li>绝对定位就是一种最原始的定位方法：给出这个组件的坐标和长宽值。</li>
</ul>
<p>这样，Qt 就知道该把组件放在哪里以及如何设置组件的大小。但是这样做带来的一个问题是，如果用户改变了窗口大小，比如点击最大化按钮或者使用鼠标拖动窗口边缘，采用绝对定位的组件是不会有任何响应的。这也很自然，因为你并没有告诉 Qt，在窗口变化时，组件是否要更新自己以及如何更新。或者，还有更简单的方法：禁止用户改变窗口大小。但这总不是长远之计。</p>
<ul>
<li>布局定位：你只要把组件放入某一种布局，布局由专门的布局管理器进行管理。当需要调整大小或者位置的时候，Qt 使用对应的布局管理器进行调整。</li>
</ul>
<p>布局定位完美的解决了使用绝对定位的缺陷。</p>
<p>Qt 提供的布局中以下三种是我们最常用的：</p>
<ul>
<li><p>QHBoxLayout：按照水平方向从左到右布局；</p>
</li>
<li><p>QVBoxLayout：按照竖直方向从上到下布局；</p>
</li>
<li><p>QGridLayout：在一个网格中进行布局，类似于 HTML 的 table；</p>
</li>
</ul>
<h3 id="4-7-1-水平-x2F-垂直-x2F-网格布局"><a href="#4-7-1-水平-x2F-垂直-x2F-网格布局" class="headerlink" title="4.7.1 水平&#x2F;垂直&#x2F;网格布局"></a>4.7.1 水平&#x2F;垂直&#x2F;网格布局</h3><p>下面我们通过一个例子来学习以下水平布局管理器的使用方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  QWidget window;</span><br><span class="line"></span><br><span class="line">  window.<span class="built_in">setWindowTitle</span>(<span class="string">&quot;Enter your age&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  QSpinBox *spinBox = <span class="keyword">new</span> <span class="built_in">QSpinBox</span>(&amp;window);</span><br><span class="line"></span><br><span class="line">  QSlider *slider = <span class="keyword">new</span> <span class="built_in">QSlider</span>(Qt::Horizontal, &amp;window);</span><br><span class="line"></span><br><span class="line">  spinBox-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>, <span class="number">130</span>);</span><br><span class="line"></span><br><span class="line">  slider-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>, <span class="number">130</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">QObject::<span class="built_in">connect</span>(slider, &amp;QSlider::valueChanged, </span><br><span class="line"></span><br><span class="line">spinBox, &amp;QSpinBox::setValue);</span><br><span class="line"></span><br><span class="line">  **<span class="built_in">void</span> (QSpinBox:: <span class="comment">/*spinBoxSignal)(int) = &amp;QSpinBox::valueChanged;**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**QObject::connect(spinBox, spinBoxSignal,** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**slider, &amp;QSlider::setValue);**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  spinBox-&gt;setValue(35);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  //给控件设置布局</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  **QHBoxLayout /*layout = new QHBoxLayout;**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  **layout-&gt;addWidget(spinBox);**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  **layout-&gt;addWidget(slider);**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**window.setLayout(layout);**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  window.show();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  return app.exec();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>



<p>我们在这段代码中引入了两个新的组件：QSpinBox和QSlider。QSpinBox就是只能输入数字的输入框，并且带有上下箭头的步进按钮。QSlider则是带有滑块的滑竿。</p>
<p> <img src="/photos/image018.png" alt="QT"></p>
<p>上面的代码中<strong>window.setLayout(layout);</strong> 是将布局设置到窗口window中，在窗口中设置布局还有另一种写法：</p>
<p>&#x2F;&#x2F;给控件设置布局</p>
<p>  *<em>QHBoxLayout &#x2F;<em>layout &#x3D; new QHBoxLayout</em></em><strong>（window）;</strong></p>
<p>  <strong>layout-&gt;addWidget(spinBox);</strong></p>
<p>  <strong>layout-&gt;addWidget(slider);</strong></p>
<p>在创建布局对象的时候给新对象指定父窗口，就等于给传入的窗口设置了布局。</p>
<p>另外布局与布局之间是可以嵌套使用的，使用addLayout（）方法。QVBoxLayout的使用方法与QHBoxLayout完全相同。</p>
<p><strong>关于上述代码中信号和槽连接的解释：</strong></p>
<p>当数字输入框显示的内容发生改变的时候，会发出一股信息，滑块会接收这一信号，并作出改变。如果二者的信号槽连接写成下边这样：</p>
<p>QObject::connect(spinBox, &amp;QSpinBox::valueChanged, </p>
<p>slider, &amp;QSlider::setValue);</p>
<p>编译器却会报错</p>
<p>no matching function for call to ‘QObject::connect(QSpinBox*&amp;, <unresolved overloaded function type>, QSlider*&amp;, void (QAbstractSlider::*)(int))’</p>
<p>这是怎么回事呢？从出错信息可以看出，编译器认为QSpinBox::valueChanged是一个 overloaded 的函数。我们看一下QSpinBox的文档发现，QSpinBox的确有两个信号：</p>
<ul>
<li><p>void valueChanged(int)</p>
</li>
<li><p>void valueChanged(const QString &amp;)</p>
</li>
</ul>
<p>当我们使用&amp;QSpinBox::valueChanged取函数指针时，编译器不知道应该取哪一个函数（记住前面我们介绍过的，signal 也是一个普通的函数。）的地址，因此报错。解决的方法很简单，编译器不是不能确定哪一个函数吗？那么我们就显式指定一个函数。方法就是，我们创建一个函数指针，这个函数指针参数指定为 int：</p>
<p>void (QSpinBox:: *spinBoxSignal)(int) &#x3D; &amp;QSpinBox::valueChanged;</p>
<p>然后我们将这个函数指针作为 signal，与 QSlider 的函数连接：</p>
<p>QObject::connect(spinBox, spinBoxSignal, </p>
<p>slider, &amp;QSlider::setValue);</p>
<p>这样便避免了编译错误。</p>
<h4 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h4><p>通过布局管理器搭建如下登陆界面：</p>
<p> <img src="/photos/image019.png" alt="QT"></p>
<h3 id="4-7-2-自定义控件"><a href="#4-7-2-自定义控件" class="headerlink" title="4.7.2 自定义控件"></a>4.7.2 自定义控件</h3><p>在搭建Qt窗口界面的时候，在一个项目中很多窗口，或者是窗口中的某个模块会被经常性的重复使用。一般遇到这种情况我们都会将这个窗口或者模块拿出来做成一个独立的窗口类，以备以后重复使用。</p>
<p>在使用Qt的ui文件搭建界面的时候，工具栏栏中只为我们提供了标准的窗口控件，如果我们想使用自定义控件怎么办？</p>
<p>例如：我们从QWidget派生出一个类SmallWidget，实现了一个自定窗口，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// smallwidget.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">SmallWidget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  QSpinBox* spin;</span><br><span class="line"></span><br><span class="line">  QSlider* slider;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// smallwidget.cpp</span></span><br><span class="line"></span><br><span class="line">SmallWidget::<span class="built_in">SmallWidget</span>(QWidget *parent) : <span class="built_in">QWidget</span>(parent)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  spin = <span class="keyword">new</span> <span class="built_in">QSpinBox</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  slider = <span class="keyword">new</span> <span class="built_in">QSlider</span>(Qt::Horizontal, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建布局对象</span></span><br><span class="line"></span><br><span class="line">  QHBoxLayout* layout = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将控件添加到布局中</span></span><br><span class="line"></span><br><span class="line">  layout-&gt;<span class="built_in">addWidget</span>(spin);</span><br><span class="line"></span><br><span class="line">  layout-&gt;<span class="built_in">addWidget</span>(slider);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将布局设置到窗口中</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setLayout</span>(layout);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加消息响应</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(spin, </span><br><span class="line"></span><br><span class="line"><span class="built_in">static_cast</span>&lt;<span class="built_in">void</span> (QSpinBox::*)(<span class="type">int</span>)&gt;(&amp;QSpinBox::valueChanged),</span><br><span class="line"></span><br><span class="line"> slider, &amp;QSlider::setValue);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">connect</span>(slider, &amp;QSlider::valueChanged, </span><br><span class="line"></span><br><span class="line">spin, &amp;QSpinBox::setValue);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么这个SmallWidget可以作为独立的窗口显示,也可以作为一个控件来使用：</p>
<p>打开Qt的.ui文件,因为SmallWidget是派生自Qwidget类,所以需要在ui文件中先放入一个QWidget控件, 然后再上边鼠标右键</p>
<p> <img src="/photos/image020.png" alt="QT"></p>
<p>弹出提升窗口部件对话框</p>
<p> <img src="/photos/image021.png" alt="QT"></p>
<p>添加要提升的类的名字,然后选择 添加 </p>
<p> <img src="/photos/image022.png" alt="QT"></p>
<p>添加之后,类名会显示到上边的列表框中,然后单击提升按钮,完成操作.</p>
<p>我们可以看到, 这个窗口对应的类从原来的QWidget变成了SmallWidget</p>
<p> <img src="/photos/image023.png" alt="QT"></p>
<p>再次运行程序,这个widget_3中就能显示出我们自定义的窗口了.</p>
<p> <img src="/photos/image024.png" alt="QT"></p>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>3、信号和槽机制</title>
    <url>/archives/60870931.html</url>
    <content><![CDATA[<p>信号槽是 Qt 框架引以为豪的机制之一。所谓信号槽，实际就是观察者模式。<strong>当某个事件发生之后</strong>，比如，按钮检测到自己被点击了一下，<strong>它就会发出一个信号（signal）</strong>。这种发出是没有目的的，类似广播。<strong>如果有对象对这个信号感兴趣，它就会使用连接（connect）函数</strong>，意思是，<strong>将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号</strong>。也就是说，<strong>当信号发出时，被连接的槽函数会自动被回调</strong>。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。（这里提一句，Qt 的信号槽使用了额外的处理来实现，并不是 GoF 经典的观察者模式的实现方式。）</p>
 <span id="more"></span>
<h2 id="3-1-信号和槽"><a href="#3-1-信号和槽" class="headerlink" title="3.1 信号和槽"></a>3.1 信号和槽</h2><p>为了体验一下信号槽的使用，我们以一段简单的代码说明：</p>
<ul>
<li>Qt5 的书写方式</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">&quot;Quit&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">QObject::<span class="built_in">connect</span>(&amp;button, &amp;QPushButton::clicked,</span><br><span class="line"></span><br><span class="line">&amp;app, &amp;QApplication::quit);</span><br><span class="line"></span><br><span class="line">  button.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们按照前面文章中介绍的在 Qt Creator 中创建工程的方法创建好工程，然后将main()函数修改为上面的代码。点击运行，我们会看到一个按钮，上面有“Quit”字样。点击按钮，程序退出。</p>
<p>connect()函数最常用的一般形式：</p>
<p><strong>connect(sender, signal, receiver, slot);</strong></p>
<p>参数：</p>
<ul>
<li><p>sender：发出信号的对象</p>
</li>
<li><p>signal：发送对象发出的信号</p>
</li>
<li><p>receiver：接收信号的对象</p>
</li>
<li><p>slot：接收对象在接收到信号之后所需要调用的函数</p>
</li>
</ul>
<p><strong>信号槽要求信号和槽的参数一致，所谓一致，是参数类型一致。如果不一致，允许的情况是，槽函数的参数可以比信号的少，即便如此，槽函数存在的那些参数的顺序也必须和信号的前面几个一致起来。这是因为，你可以在槽函数中选择忽略信号传来的数据（也就是槽函数的参数比信号的少），但是不能说信号根本没有这个数据，你就要在槽函数中使用（就是槽函数的参数比信号的多，这是不允许的）。</strong></p>
<p>如果信号槽不符合，或者根本找不到这个信号或者槽函数，比如我们改成：</p>
<p>connect(&amp;button, &amp;QPushButton::clicked, &amp;QApplication::quit2);</p>
<p>由于 QApplication 没有 quit2 这样的函数，因此在编译时会有编译错误：</p>
<p>‘quit2’ is not a member of QApplication</p>
<p>这样，使用成员函数指针我们就不会担心在编写信号槽的时候出现函数错误。</p>
<ul>
<li>Qt4 的书写方式：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line">​    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>; </span><br><span class="line"></span><br><span class="line">​    QPushButton *button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Quit&quot;</span>); </span><br><span class="line"></span><br><span class="line">​    <span class="built_in">connect</span>(button, <span class="built_in">SIGNAL</span>(<span class="built_in">clicked</span>()), &amp;a, <span class="built_in">SLOT</span>(<span class="built_in">quit</span>())); </span><br><span class="line"></span><br><span class="line">​    button-&gt;<span class="built_in">show</span>(); </span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> a.<span class="built_in">exec</span>(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里使用了<strong>SIGNAL和SLOT这两个宏，将两个函数名转换成了字符串</strong>。注意到connect()函数的 signa- 和 slot 都是接受字符串，一旦出现连接不成功的情况，Qt4是没有编译错误的（因为一切都是字符串，编译期是不检查字符串是否匹配），而是在运行时给出错误。这无疑会增加程序的不稳定性。</p>
<ul>
<li>Qt5在语法上完全兼容Qt4</li>
</ul>
<h2 id="3-2-自定义信号槽"><a href="#3-2-自定义信号槽" class="headerlink" title="3.2 自定义信号槽"></a>3.2 自定义信号槽</h2><p>使用connect()可以让我们连接系统提供的信号和槽。但是，Qt 的信号槽机制并不仅仅是使用系统提供的那部分，还会允许我们自己设计自己的信号和槽。</p>
<p>下面我们看看使用 Qt 的信号槽，实现一个报纸和订阅者的例子：</p>
<p>有一个报纸类Newspaper，有一个订阅者类Subscriber。Subscriber可以订阅Newspaper。这样，当Newspaper有了新的内容的时候，Subscriber可以立即得到通知。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">////////// newspaper.h //////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Newspaper</span> : <span class="keyword">public</span> QObject</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Newspaper</span>(<span class="type">const</span> QString &amp; name) :</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">m_name</span>(name)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="function">emit <span class="title">newPaper</span><span class="params">(m_name)</span></span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">newPaper</span><span class="params">(<span class="type">const</span> QString &amp;name)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  QString m_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">////////// reader.h //////////</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reader</span> : <span class="keyword">public</span> QObject</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Reader</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">receiveNewspaper</span><span class="params">(<span class="type">const</span> QString &amp; name)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Receives Newspaper: &quot;</span> &lt;&lt; name;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">////////// main.cpp //////////</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;newspaper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function">Newspaper <span class="title">newspaper</span><span class="params">(<span class="string">&quot;Newspaper A&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  Reader reader;</span><br><span class="line"></span><br><span class="line">  QObject::<span class="built_in">connect</span>(&amp;newspaper, &amp;Newspaper::newPaper,</span><br><span class="line"></span><br><span class="line">​           &amp;reader,  &amp;Reader::receiveNewspaper);</span><br><span class="line"></span><br><span class="line">  newspaper.<span class="built_in">send</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>首先看Newspaper这个类。这个类继承了QObject类。<strong>只有继承了QObject类的类，才具有信号槽的能力。</strong>所以，为了使用信号槽，必须继承QObject。<strong>凡是QObject类（不管是直接子类还是间接子类），都应该在第一行代码写上Q_OBJECT</strong>。不管是不是使用信号槽，都应该添加这个宏。这个宏的展开将为我们的类提供信号槽机制、国际化机制以及 Qt 提供的不基于 C++ RTTI 的反射能力。</p>
</li>
<li><p>Newspaper类的 public 和 private 代码块都比较简单，只不过它新加了一个 signals。signals 块所列出的，就是该类的信号。<strong>信号就是一个个的函数名，返回值是 void（因为无法获得信号的返回值，所以也就无需返回任何值），参数是该类需要让外界知道的数据。信号作为函数名，不需要在 cpp 函数中添加任何实现。</strong></p>
</li>
<li><p>Newspaper类的send()函数比较简单，只有一个语句emit newPaper(m_name);。emit 是 Qt 对 C++ 的扩展，是一个关键字（其实也是一个宏）。emit 的含义是发出，也就是发出newPaper()信号。感兴趣的接收者会关注这个信号，可能还需要知道是哪份报纸发出的信号？所以，我们将实际的报纸名字m_name当做参数传给这个信号。当接收者连接这个信号时，就可以通过槽函数获得实际值。这样就完成了数据从发出者到接收者的一个转移。</p>
</li>
<li><p>Reader类更简单。因为这个类需要接受信号，所以我们将其继承了QObject，并且添加了Q_OBJECT宏。后面则是默认构造函数和一个普通的成员函数。<strong>Qt 5 中，任何成员函数、static 函数、全局函数和 Lambda 表达式都可以作为槽函数。</strong>与信号函数不同，槽函数必须自己完成实现代码。槽函数就是普通的成员函数，因此作为成员函数，也会受到 public、private 等访问控制符的影响。（如果信号是 private 的，这个信号就不能在类的外面连接，也就没有任何意义。）</p>
</li>
</ul>
<h3 id="自定义信号槽需要注意的事项"><a href="#自定义信号槽需要注意的事项" class="headerlink" title="自定义信号槽需要注意的事项"></a>自定义信号槽需要注意的事项</h3><ul>
<li><p><strong>发送者和接收者都需要是QObject的子类（当然，槽函数是全局函数、Lambda 表达式等无需接收者的时候除外）；</strong></p>
</li>
<li><p><strong>使用 signals 标记信号函数，信号是一个函数声明，返回 void，不需要实现函数代码；</strong></p>
</li>
<li><p><strong>槽函数是普通的成员函数，作为成员函数，会受到 public、private、protected 的影响；</strong></p>
</li>
<li><p><strong>使用 emit 在恰当的位置发送信号；</strong></p>
</li>
<li><p><strong>使用QObject::connect()函数连接信号和槽。</strong></p>
</li>
<li><p><strong>任何成员函数、static 函数、全局函数和 Lambda 表达式都可以作为槽函数</strong></p>
</li>
</ul>
<h3 id="信号槽的更多用法"><a href="#信号槽的更多用法" class="headerlink" title="信号槽的更多用法"></a>信号槽的更多用法</h3><ul>
<li>一个信号可以和多个槽相连</li>
</ul>
<p><strong>如果是这种情况，这些槽会一个接一个的被调用，但是它们的****调用顺序是不确定的。</strong></p>
<ul>
<li>多个信号可以连接到一个槽</li>
</ul>
<p><strong>只要任意一个信号发出，这个槽就会被调用</strong>。</p>
<ul>
<li>一个信号可以连接到另外的一个信号</li>
</ul>
<p><strong>当第一个信号发出时，第二个信号被发出。除此之外，这种信号-信号的形式和信号-槽的形式没有什么区别。</strong></p>
<ul>
<li>槽可以被取消链接</li>
</ul>
<p>这种情况并不经常出现，因为<strong>当一个对象delete之后，Qt自动取消所有连接到这个对象上面的槽</strong>。</p>
<ul>
<li>使用Lambda 表达式</li>
</ul>
<p>在使用 Qt 5 的时候，能够支持 Qt 5 的编译器都是支持 Lambda 表达式的。</p>
<p>我们的代码可以写成下面这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QObject::<span class="built_in">connect</span>(&amp;newspaper, <span class="built_in">static_cast</span>&lt;<span class="built_in">void</span> (Newspaper:: *)</span><br><span class="line"></span><br><span class="line">(<span class="type">const</span> QString &amp;)&gt;(&amp;Newspaper::newPaper),</span><br><span class="line"></span><br><span class="line">[=](<span class="type">const</span> QString &amp;name) </span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">/* Your code here. */</span> &#125;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>  在连接信号和槽的时候，槽函数可以使用Lambda表达式的方式进行处理。</p>
<h2 id="3-3-Lambda表达式"><a href="#3-3-Lambda表达式" class="headerlink" title="3.3 Lambda表达式"></a>3.3 Lambda表达式</h2><p>C++11中的Lambda表达式<strong>用于定义并创建匿名的函数对象</strong>，以简化编程工作。首先看一下Lambda表达式的基本构成：</p>
<p> <img src="/photos/image010.png" alt="Qt"></p>
<p>&#x2F;<a href="%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">函数对象参数</a>mutable或exception -&gt;返回值{函数体}</p>
<p>① 函数对象参数；</p>
<p>[]，标识一个<strong>Lambda的开始</strong>，这部分必须存在，<strong>不能省略</strong>。函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义Lambda为止时Lambda所在作用范围内可见的局部变量（包括Lambda所在类的this）。函数对象参数有以下形式：</p>
<ul>
<li><p>空。没有使用任何函数对象参数。</p>
</li>
<li><p>&#x3D;。函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是<strong>值传递方式</strong>（相当于编译器自动为我们按值传递了所有局部变量）。</p>
</li>
<li><p>&amp;。函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是<strong>引用传递方式</strong>（相当于编译器自动为我们按引用传递了所有局部变量）。</p>
</li>
<li><p>this。函数体内可以使用Lambda所在类中的成员变量。</p>
</li>
<li><p>a。将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝，因为默认情况下函数是const的。要修改传递进来的a的拷贝，可以添加mutable修饰符。</p>
</li>
<li><p>&amp;a。将a按引用进行传递。</p>
</li>
<li><p>a, &amp;b。将a按值进行传递，b按引用进行传递。</p>
</li>
<li><p>&#x3D;，&amp;a, &amp;b。除a和b按引用进行传递外，其他参数都按值进行传递。</p>
</li>
<li><p>&amp;, a, b。除a和b按值进行传递外，其他参数都按引用进行传递。</p>
</li>
</ul>
<p>int m &#x3D; 0, - &#x3D; 0;</p>
<p>[&#x3D;] (int a) mutable { m &#x3D; ++- + a; }(4);</p>
<p>   [&amp;] (int a) { m &#x3D; ++- + a; }(4);</p>
<p>   [&#x3D;,&amp;m] (int a) mutable { m &#x3D; ++- + a; }(4);</p>
<p>   [&amp;,m] (int a) mutable { m &#x3D; ++- + a; }(4);</p>
<p>   [m,n] (int a) mutable { m &#x3D; ++- + a; }(4);</p>
<p>   [&amp;m,&amp;n] (int a) { m &#x3D; ++- + a; }(4);</p>
<p>② 操作符重载函数参数；</p>
<p>标识重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用（如：(&amp;a,&amp;b)）两种方式进行传递。</p>
<p>③ 可修改标示符；</p>
<p>mutable声明，这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。</p>
<p>④ 错误抛出标示符；</p>
<p>exception声明，这部分也可以省略。exception声明用于指定函数抛出的异常，如抛出整数类型的异常，可以使用throw(int)</p>
<p>⑤ 函数返回值；</p>
<p>-&gt;返回值类型，标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略。</p>
<p>⑥ 是函数体；</p>
<p>  {}，标识函数的实现，这部分不能省略，但函数体可以为空。</p>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>2、创建Qt项目</title>
    <url>/archives/6051431.html</url>
    <content><![CDATA[<h2 id="2-1-使用向导创建"><a href="#2-1-使用向导创建" class="headerlink" title="2.1 使用向导创建"></a>2.1 使用向导创建</h2> <span id="more"></span>
<p>打开Qt Creator 界面选择 New Project或者选择菜单栏 【文件】-【新建文件或项目】菜单项</p>
<p>​                 <img src="/photos/image001.png"  />              </p>
<p>弹出New Project对话框，选择Qt Widgets Application， </p>
<p> <img src="/photos/image002.png" alt="Qt"></p>
<p>选择【Choose】按钮，弹出如下对话框</p>
<p> <img src="/photos/image003.png" alt="Qt"></p>
<p>设置项目名称和路径，按照向导进行下一步，</p>
<p> <img src="/photos/image004.png" alt="Qt"></p>
<p>选择编译套件</p>
<p> <img src="/photos/image005.png" alt="Qt"></p>
<p>向导会默认添加一个继承自CMainWindow的类，可以在此修改类的名字和基类。继续下一步</p>
<p> <img src="/photos/image006.png" alt="Qt"></p>
<p>即可创建出一个Qt桌面程序。</p>
<h2 id="2-2-手动创建"><a href="#2-2-手动创建" class="headerlink" title="2.2   手动创建"></a>2.2   手动创建</h2><p>添加一个空项目</p>
<p> <img src="/photos/image007.png" alt="Qt"></p>
<p>选择【choose】进行下一步。设置项目名称和路径 —&gt; 选择编译套件 –&gt; 修改类信息 –&gt; 完成（步骤同上），生成一个空项目。在空项目中添加文件：在项目名称上单击鼠标右键弹出右键菜单，选择【添加新文件】</p>
<p> <img src="/photos/image008.png" alt="Qt"></p>
<p>弹出新建文件对话框</p>
<p> <img src="/photos/image009.png" alt="Qt"></p>
<p>在此对话框中选择要添加的类或者文件，根据向导完成文件的添加。</p>
<h2 id="2-3-pro文件"><a href="#2-3-pro文件" class="headerlink" title="2.3   .pro文件"></a>2.3   .pro文件</h2><p>在使用Qt向导生成的应用程序.pro文件格式如下：</p>
<pre><code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QT    += core gui  <span class="comment">//模块的名字</span></span><br><span class="line"></span><br><span class="line">​    <span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</span><br><span class="line"></span><br><span class="line">​    TARGET = test <span class="comment">//应用程序</span></span><br><span class="line"></span><br><span class="line">​    TEMPLATE = app <span class="comment">//生成的makefile的模板类型</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//源文件</span></span><br><span class="line"></span><br><span class="line"> SOURCES += main.cpp/</span><br><span class="line"></span><br><span class="line"> mainwindow.cpp</span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件</span></span><br><span class="line"></span><br><span class="line"> HEADERS += mainwindow.h</span><br><span class="line"></span><br><span class="line"> <span class="comment">//窗口设计文件</span></span><br><span class="line"></span><br><span class="line">FORMS  += mainwindow.ui</span><br></pre></td></tr></table></figure>
</code></pre>
<p><strong>.pro</strong>就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件**。.pro文件的写法如下：</p>
<ul>
<li>注释</li>
</ul>
<p>从“#”开始，到这一行结束。</p>
<ul>
<li><p>模板变量告诉qmake为这个应用程序生成哪种makefile。下面是可供使用的选择：<strong>TEMPLATE</strong> &#x3D; app</p>
</li>
<li><p>app -建立一个应用程序的makefile。这是默认值，所以如果模板没有被指定，这个将被使用。</p>
</li>
<li><p>lib - 建立一个库的makefile。</p>
</li>
<li><p>vcapp - 建立一个应用程序的VisualStudio项目文件。</p>
</li>
<li><p>vclib - 建立一个库的VisualStudio项目文件。</p>
</li>
<li><p>subdirs -这是一个特殊的模板，它可以创建一个能够进入特定目录并且为一个项目文件生成makefile并且为它调用make的makefile。</p>
</li>
<li><p>#指定生成的应用程序名：</p>
</li>
</ul>
<p><strong>TARGET</strong> &#x3D; QtDemo</p>
<ul>
<li>#工程中包含的头文件</li>
</ul>
<p><strong>HEADERS</strong> +&#x3D; include&#x2F;painter.h</p>
<ul>
<li>#工程中包含的.ui设计文件</li>
</ul>
<p><strong>FORMS</strong> +&#x3D; forms&#x2F;painter.ui</p>
<ul>
<li>#工程中包含的源文件</li>
</ul>
<p><strong>SOURCES</strong> +&#x3D; sources&#x2F;main.cpp sources&#x2F;painter.cpp</p>
<ul>
<li>#工程中包含的资源文件</li>
</ul>
<p><strong>RESOURCES</strong> +&#x3D; qrc&#x2F;painter.qrc</p>
<ul>
<li><strong>greaterThan(QT_MAJOR_VERSION, 4): QT +&#x3D; widgets</strong></li>
</ul>
<p><strong>这条语句的含义是，如果QT_MAJOR_VERSION大于4（也就是当前使用的Qt5及更高版本）需要增加widgets模块。如果项目仅需支持Qt5，也可以直接添加“QT +&#x3D; widgets”一句。不过为了保持代码兼容，最好还是按照QtCreator生成的语句编写。</strong></p>
<ul>
<li>#配置信息</li>
</ul>
<p>CONFIG用来告诉qmake关于应用程序的配置信息。</p>
<p>CONFIG +&#x3D; c++11  &#x2F;&#x2F;使用c++11的特性</p>
<p>在这里使用“+&#x3D;”，是因为我们添加我们的配置选项到任何一个已经存在中。这样做比使用“&#x3D;”那样替换已经指定的所有选项更安全。</p>
<h2 id="2-4-一个最简单的Qt应用程序"><a href="#2-4-一个最简单的Qt应用程序" class="headerlink" title="2.4   一个最简单的Qt应用程序"></a>2.4   一个最简单的Qt应用程序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #include &lt;QApplication&gt;</span><br><span class="line"> #include &lt;QWidget&gt;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">     QApplication a(argc, argv);</span><br><span class="line">     QWidget w;</span><br><span class="line">     w.show();</span><br><span class="line">     return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解释：</p>
<ul>
<li><p>Qt头文件没有.h后缀</p>
</li>
<li><p>Qt一个类对应一个头文件，类名就是头文件名</p>
</li>
<li><p>QApplication应用程序类</p>
</li>
<li><p>管理图形用户界面应用程序的控制流和主要设置。</p>
</li>
<li><p>是Qt的整个后台管理的命脉它<strong>包含主事件循环</strong>，在其中来自窗口系统和其它资源的<strong>所有事件处理和调度</strong>。它也处理<strong>应用程序的初始化和结束</strong>，并且<strong>提供对话管理</strong>。</p>
</li>
<li><p>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</p>
</li>
<li><p>a.exec()</p>
</li>
</ul>
<p>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。<strong>在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</strong></p>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>1、Qt概述</title>
    <url>/archives/6041302.html</url>
    <content><![CDATA[<h2 id="1-1-什么是Qt"><a href="#1-1-什么是Qt" class="headerlink" title="1.1 什么是Qt"></a>1.1 什么是Qt</h2><p>Qt是一个<strong>跨平台</strong>的C++<strong>图形用户界面应用程序框架</strong>。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。它是完全面向对象的，很容易扩展，并且允许真正的组件编程。</p>
<span id="more"></span>

<h2 id="1-2-Qt的发展史"><a href="#1-2-Qt的发展史" class="headerlink" title="1.2 Qt的发展史"></a>1.2 Qt的发展史</h2><p>1991年 Qt最早由奇趣科技开发</p>
<p>1996年 进入商业领域，它也是目前流行的Linux桌面环境KDE的基础</p>
<p>2008年 奇趣科技被诺基亚公司收购，Qt称为诺基亚旗下的编程语言</p>
<p>2012年 Qt又被Digia公司收购</p>
<p>2014年4月 跨平台的集成开发环境Qt Creator3.1.0发布，同年5月20日配发了Qt5.3正式版，至此Qt实现了对iOS、Android、WP等各平台的全面支持。</p>
<p>当前Qt最新版本为 5.5.0</p>
<h2 id="1-3-支持的平台"><a href="#1-3-支持的平台" class="headerlink" title="1.3 支持的平台"></a>1.3 支持的平台</h2><ul>
<li><p>Windows – XP、Vista、Win7、Win8、Win2008、Win10</p>
</li>
<li><p>Uinux&#x2F;X11 – Linux、Su- Solaris、HP-UX、Compaq Tru64 UNIX、IBM AIX、SGI IRIX、FreeBSD、BSD&#x2F;OS、和其他很多X11平台</p>
</li>
<li><p>Macintosh – Mac OS X</p>
</li>
<li><p>Embedded – 有帧缓冲支持的嵌入式Linux平台，Windows CE</p>
</li>
</ul>
<h2 id="1-4-Qt版本"><a href="#1-4-Qt版本" class="headerlink" title="1.4 Qt版本"></a>1.4 Qt版本</h2><p>Qt按照不同的版本发行，分为商业版和开源版</p>
<ul>
<li>商业版</li>
</ul>
<p>为商业软件提供开发，他们提供传统商业软件发行版，并且提供在商业有效期内的免费升级和技术支持服务。</p>
<ul>
<li>开源的LGPL版本：</li>
</ul>
<p>为了开发自有而设计的开放源码软件，它提供了和商业版本同样的功能，在GNU通用公共许可下，它是免费的。</p>
<h2 id="1-5-Qt的安装"><a href="#1-5-Qt的安装" class="headerlink" title="1.5 Qt的安装"></a>1.5 Qt的安装</h2><h3 id="Linux-Host"><a href="#Linux-Host" class="headerlink" title="Linux Host"></a>Linux Host</h3><p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x86-5.5.0.run">Qt 5.5.0 for Linux 32-bit (535 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x86-5.5.0.run.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x64-5.5.0-2.run">Qt 5.5.0 for Linux 64-bit (532 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x64-5.5.0-2.run.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x64-android-5.5.0-2.run">Qt 5.5.0 for Android (Linux 64-bit, 605 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x64-android-5.5.0-2.run.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x86-android-5.5.0.run">Qt 5.5.0 for Android (Linux 32-bit, 608 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-linux-x86-android-5.5.0.run.mirrorlist">  (info)</a></p>
<h3 id="OS-X-Host"><a href="#OS-X-Host" class="headerlink" title="OS X Host"></a>OS X Host</h3><p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-mac-x64-clang-5.5.0.dmg">Qt 5.5.0 for Mac (588 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-mac-x64-clang-5.5.0.dmg.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-mac-x64-android-5.5.0.dmg">Qt 5.5.0 for Android (Mac, 652 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-mac-x64-android-5.5.0.dmg.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-mac-x64-android-ios-5.5.0.dmg">Qt 5.5.0 for Android and iOS (Mac, 1.7 GB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-mac-x64-android-ios-5.5.0.dmg.mirrorlist">  (info)</a></p>
<h3 id="Windows-Host"><a href="#Windows-Host" class="headerlink" title="Windows Host"></a>Windows Host</h3><p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2013_64-5.5.0.exe">Qt 5.5.0 for Windows 64-bit (VS 2013, 650 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2013_64-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2013-5.5.0.exe">Qt 5.5.0 for Windows 32-bit (VS 2013, 633 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2013-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2012-5.5.0.exe">Qt 5.5.0 for Windows 32-bit (VS 2012, 587 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2012-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2010-5.5.0.exe">Qt 5.5.0 for Windows 32-bit (VS 2010, 585 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-msvc2010-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-mingw492-5.5.0.exe">Qt 5.5.0 for Windows 32-bit (MinGW 4.9.2, 959 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-mingw492-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-android-5.5.0.exe">Qt 5.5.0 for Android (Windows 32-bit, 1.0 GB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-android-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>·    <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-winrt-5.5.0.exe">Qt 5.5.0 for Windows RT 32-bit (621 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-winrt-5.5.0.exe.mirrorlist">  (info)</a></p>
<p>Qt对不同的平台提供了不同版本的安装包，可根据实际情况自行下载安装，本文档使用<a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-mingw492-5.5.0.exe">Qt 5.5.0 for Windows 32-bit (MinGW 4.9.2, 959 MB)</a> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.0/qt-opensource-windows-x86-mingw492-5.5.0.exe.mirrorlist">  (info)</a> 版本就行讲解。</p>
<p>MinGW32 –&gt; Minimalist GNU for Windows 32</p>
<h2 id="1-6-Qt的优点"><a href="#1-6-Qt的优点" class="headerlink" title="1.6 Qt的优点"></a>1.6 Qt的优点</h2><ul>
<li>跨平台，几乎支持所有的平台</li>
<li>接口简单，容易上手，学习QT框架对学习其他框架有参考意义。</li>
<li>一定程度上简化了内存回收机制 </li>
<li>开发效率高，能够快速的构建应用程序。</li>
<li>有很好的社区氛围，市场份额在缓慢上升。</li>
<li>可以进行嵌入式开发。</li>
</ul>
<p><strong>免责声明：</strong>本文根据<a href="https://yun.itheima.com/">传智播客</a>知识整理，仅为个人收藏，知识分享，请勿商用！</p>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
